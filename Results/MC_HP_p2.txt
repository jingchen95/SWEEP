---------------------- Test Application - Synthetic Benchmarks ---------------------
---------------------- You choose Paper4 scheduler ---------------------
[Warning] CP->Memory-boundness (ClusterA) is smaller than 0!
CP: Training Phase finished. Predicted execution time and power results for the kernel tasks: 

---------- Execution Time Predictions ---------- 
Memory Frequency: 1866000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.016753	0.0132903	
CPU_Freq[1881600]: 0.01853	0.0138014	
CPU_Freq[1728000]: 0.0200361	0.0146511	
CPU_Freq[1574400]: 0.0218454	0.0156665	
CPU_Freq[1420800]: 0.0240595	0.0169015	
CPU_Freq[1267200]: 0.0268313	0.0184359	
CPU_Freq[1113600]: 0.0331654	0.0210602	
CPU_Freq[960000]: 0.0351715	0.0229778	
CPU_Freq[806400]: 0.0418669	0.0265463	
CPU_Freq[652800]: 0.0519405	0.0317943	
CPU_Freq[499200]: 0.0687853	0.0402717	
CPU_Freq[345600]: 0.102531	0.0562846	
Cluster 1: 
CPU_Freq[2035200]: 0.0348907	0.0246195	0.0184689	
CPU_Freq[1881600]: 0.035339	0.0265971	0.0186603	
CPU_Freq[1728000]: 0.0365846	0.0285741	0.0190076	
CPU_Freq[1574400]: 0.0380873	0.0309487	0.0194368	
CPU_Freq[1420800]: 0.0399354	0.0338542	0.0199795	
CPU_Freq[1267200]: 0.042263	0.0374907	0.0206854	
CPU_Freq[1113600]: 0.0440717	0.0424482	0.0220104	
CPU_Freq[960000]: 0.0493565	0.0484277	0.0229803	
CPU_Freq[806400]: 0.0551437	0.0572027	0.024999	
CPU_Freq[652800]: 0.0639963	0.0703971	0.0283123	
CPU_Freq[499200]: 0.0791563	0.0924409	0.0345312	
CPU_Freq[345600]: 0.110689	0.136538	0.0491988	
Memory Frequency: 1600000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0172174	0.0148395	
CPU_Freq[1881600]: 0.0184804	0.0155538	
CPU_Freq[1728000]: 0.0199745	0.016395	
CPU_Freq[1574400]: 0.0217695	0.0174004	
CPU_Freq[1420800]: 0.0239662	0.0186232	
CPU_Freq[1267200]: 0.0267163	0.0201424	
CPU_Freq[1113600]: 0.0302587	0.0220806	
CPU_Freq[960000]: 0.0349924	0.0246392	
CPU_Freq[806400]: 0.0416374	0.0281724	
CPU_Freq[652800]: 0.0516369	0.0333683	
CPU_Freq[499200]: 0.068362	0.0417617	
CPU_Freq[345600]: 0.101882	0.0576159	
Cluster 1: 
CPU_Freq[2035200]: 0.0363299	0.02527	0.0197414	
CPU_Freq[1881600]: 0.0373674	0.0269277	0.0200147	
CPU_Freq[1728000]: 0.0385992	0.0288884	0.0203464	
CPU_Freq[1574400]: 0.0400853	0.0312436	0.020757	
CPU_Freq[1420800]: 0.0419133	0.0341255	0.021277	
CPU_Freq[1267200]: 0.0442159	0.0377326	0.0219548	
CPU_Freq[1113600]: 0.0472041	0.0423778	0.0228704	
CPU_Freq[960000]: 0.0512353	0.0485829	0.0241665	
CPU_Freq[806400]: 0.0569645	0.0572896	0.0261199	
CPU_Freq[652800]: 0.0657315	0.0703837	0.0293371	
CPU_Freq[499200]: 0.0807534	0.0922654	0.0354006	
CPU_Freq[345600]: 0.112026	0.136057	0.0497749	
Memory Frequency: 1331200000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0172516	0.0173318	
CPU_Freq[1881600]: 0.0185002	0.018036	
CPU_Freq[1728000]: 0.0199773	0.0188653	
CPU_Freq[1574400]: 0.0217519	0.0198564	
CPU_Freq[1420800]: 0.023924	0.0210618	
CPU_Freq[1267200]: 0.0266434	0.0225595	
CPU_Freq[1113600]: 0.0301467	0.0244703	
CPU_Freq[960000]: 0.0348287	0.0269926	
CPU_Freq[806400]: 0.0414023	0.0304757	
CPU_Freq[652800]: 0.0512969	0.0355979	
CPU_Freq[499200]: 0.0678525	0.0438723	
CPU_Freq[345600]: 0.101052	0.0595017	
Cluster 1: 
CPU_Freq[2035200]: 0.0392544	0.0258133	0.0217209	
CPU_Freq[1881600]: 0.0402752	0.0274514	0.0219754	
CPU_Freq[1728000]: 0.0414874	0.0293892	0.0222851	
CPU_Freq[1574400]: 0.0429501	0.0317169	0.0226693	
CPU_Freq[1420800]: 0.0447496	0.0345653	0.0231573	
CPU_Freq[1267200]: 0.0470167	0.0381309	0.0237952	
CPU_Freq[1113600]: 0.0499598	0.042723	0.0246601	
CPU_Freq[960000]: 0.0539313	0.0488582	0.0258891	
CPU_Freq[806400]: 0.0595781	0.0574683	0.0277499	
CPU_Freq[652800]: 0.068224	0.0704203	0.0308309	
CPU_Freq[499200]: 0.0830501	0.0920724	0.0366745	
CPU_Freq[345600]: 0.113953	0.13543	0.0506333	
Memory Frequency: 1062400000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0175021	0.0210854	
CPU_Freq[1881600]: 0.018729	0.0217743	
CPU_Freq[1728000]: 0.0201805	0.0225856	
CPU_Freq[1574400]: 0.0219246	0.0235553	
CPU_Freq[1420800]: 0.0240594	0.0247346	
CPU_Freq[1267200]: 0.0267326	0.0261998	
CPU_Freq[1113600]: 0.0301769	0.0280692	
CPU_Freq[960000]: 0.0347811	0.0305368	
CPU_Freq[806400]: 0.0412473	0.0339445	
CPU_Freq[652800]: 0.0509838	0.0389558	
CPU_Freq[499200]: 0.0672841	0.0470509	
CPU_Freq[345600]: 0.100002	0.0623418	
Cluster 1: 
CPU_Freq[2035200]: 0.0437353	0.0267543	0.0247956	
CPU_Freq[1881600]: 0.044731	0.028363	0.0250219	
CPU_Freq[1728000]: 0.0459136	0.0302661	0.0252984	
CPU_Freq[1574400]: 0.047341	0.0325524	0.025643	
CPU_Freq[1420800]: 0.0490976	0.0353505	0.0260827	
CPU_Freq[1267200]: 0.0513114	0.0388535	0.0266607	
CPU_Freq[1113600]: 0.0541863	0.0433658	0.027449	
CPU_Freq[960000]: 0.058068	0.0493956	0.0285771	
CPU_Freq[806400]: 0.0635907	0.0578601	0.0302984	
CPU_Freq[652800]: 0.0720541	0.0705981	0.0331743	
CPU_Freq[499200]: 0.0865855	0.0919046	0.0386867	
CPU_Freq[345600]: 0.116931	0.134609	0.0520197	
Memory Frequency: 800000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.018419	0.0271825	
CPU_Freq[1881600]: 0.0196105	0.0278466	
CPU_Freq[1728000]: 0.0210205	0.0286288	
CPU_Freq[1574400]: 0.0227149	0.0295636	
CPU_Freq[1420800]: 0.0247893	0.0307005	
CPU_Freq[1267200]: 0.0273875	0.032113	
CPU_Freq[1113600]: 0.030736	0.0339152	
CPU_Freq[960000]: 0.0352138	0.0362941	
CPU_Freq[806400]: 0.0415054	0.0395792	
CPU_Freq[652800]: 0.0509852	0.0444102	
CPU_Freq[499200]: 0.0668709	0.0522142	
CPU_Freq[345600]: 0.0988053	0.0669551	
Cluster 1: 
CPU_Freq[2035200]: 0.0512098	0.0285975	0.0300301	
CPU_Freq[1881600]: 0.0521648	0.0301585	0.0302106	
CPU_Freq[1728000]: 0.0532995	0.0320053	0.0304332	
CPU_Freq[1574400]: 0.0546695	0.0342243	0.0307133	
CPU_Freq[1420800]: 0.0563563	0.0369406	0.0310746	
CPU_Freq[1267200]: 0.0584834	0.040342	0.0315552	
CPU_Freq[1113600]: 0.0612478	0.0447245	0.0322193	
CPU_Freq[960000]: 0.0649836	0.0505832	0.0331833	
CPU_Freq[806400]: 0.0703047	0.0588113	0.0346781	
CPU_Freq[652800]: 0.0784718	0.0712017	0.0372209	
CPU_Freq[499200]: 0.0925244	0.0919466	0.0421951	
CPU_Freq[345600]: 0.121966	0.133591	0.0545117	

---------- CPU Power Predictions ---------- 
Memory Frequency: 1866000000: 
Cluster 0: 
CPU_Freq[2035200]: 1.85663	3.46055	
CPU_Freq[1881600]: 1.60824	3.03114	
CPU_Freq[1728000]: 1.38386	2.64227	
CPU_Freq[1574400]: 1.18347	2.29393	
CPU_Freq[1420800]: 1.00709	1.98612	
CPU_Freq[1267200]: 0.854716	1.71885	
CPU_Freq[1113600]: 0.72634	1.49211	
CPU_Freq[960000]: 0.621967	1.30591	
CPU_Freq[806400]: 0.541597	1.16024	
CPU_Freq[652800]: 0.485229	1.0551	
CPU_Freq[499200]: 0.452863	0.990496	
CPU_Freq[345600]: 0.4445	0.966428	
Cluster 1: 
CPU_Freq[2035200]: 1.1322	1.80675	1.93148	
CPU_Freq[1881600]: 0.995941	1.59011	1.66557	
CPU_Freq[1728000]: 0.872864	1.39119	1.42753	
CPU_Freq[1574400]: 0.76297	1.20999	1.21737	
CPU_Freq[1420800]: 0.666257	1.04649	1.03509	
CPU_Freq[1267200]: 0.582727	0.900713	0.880676	
CPU_Freq[1113600]: 0.512378	0.772647	0.754137	
CPU_Freq[960000]: 0.455212	0.662295	0.655472	
CPU_Freq[806400]: 0.411228	0.569656	0.58468	
CPU_Freq[652800]: 0.380426	0.494731	0.541762	
CPU_Freq[499200]: 0.362805	0.43752	0.526718	
CPU_Freq[345600]: 0.358367	0.398022	0.539547	
Memory Frequency: 1600000000: 
Cluster 0: 
CPU_Freq[2035200]: 1.85663	3.46055	
CPU_Freq[1881600]: 1.60824	3.03114	
CPU_Freq[1728000]: 1.38386	2.64227	
CPU_Freq[1574400]: 1.18347	2.29393	
CPU_Freq[1420800]: 1.00709	1.98612	
CPU_Freq[1267200]: 0.854716	1.71885	
CPU_Freq[1113600]: 0.72634	1.49211	
CPU_Freq[960000]: 0.621967	1.30591	
CPU_Freq[806400]: 0.541597	1.16024	
CPU_Freq[652800]: 0.485229	1.0551	
CPU_Freq[499200]: 0.452863	0.990496	
CPU_Freq[345600]: 0.4445	0.966428	
Cluster 1: 
CPU_Freq[2035200]: 1.1322	1.80675	1.93148	
CPU_Freq[1881600]: 0.995941	1.59011	1.66557	
CPU_Freq[1728000]: 0.872864	1.39119	1.42753	
CPU_Freq[1574400]: 0.76297	1.20999	1.21737	
CPU_Freq[1420800]: 0.666257	1.04649	1.03509	
CPU_Freq[1267200]: 0.582727	0.900713	0.880676	
CPU_Freq[1113600]: 0.512378	0.772647	0.754137	
CPU_Freq[960000]: 0.455212	0.662295	0.655472	
CPU_Freq[806400]: 0.411228	0.569656	0.58468	
CPU_Freq[652800]: 0.380426	0.494731	0.541762	
CPU_Freq[499200]: 0.362805	0.43752	0.526718	
CPU_Freq[345600]: 0.358367	0.398022	0.539547	
Memory Frequency: 1331200000: 
Cluster 0: 
CPU_Freq[2035200]: 1.85663	3.46055	
CPU_Freq[1881600]: 1.60824	3.03114	
CPU_Freq[1728000]: 1.38386	2.64227	
CPU_Freq[1574400]: 1.18347	2.29393	
CPU_Freq[1420800]: 1.00709	1.98612	
CPU_Freq[1267200]: 0.854716	1.71885	
CPU_Freq[1113600]: 0.72634	1.49211	
CPU_Freq[960000]: 0.621967	1.30591	
CPU_Freq[806400]: 0.541597	1.16024	
CPU_Freq[652800]: 0.485229	1.0551	
CPU_Freq[499200]: 0.452863	0.990496	
CPU_Freq[345600]: 0.4445	0.966428	
Cluster 1: 
CPU_Freq[2035200]: 1.1322	1.80675	1.93148	
CPU_Freq[1881600]: 0.995941	1.59011	1.66557	
CPU_Freq[1728000]: 0.872864	1.39119	1.42753	
CPU_Freq[1574400]: 0.76297	1.20999	1.21737	
CPU_Freq[1420800]: 0.666257	1.04649	1.03509	
CPU_Freq[1267200]: 0.582727	0.900713	0.880676	
CPU_Freq[1113600]: 0.512378	0.772647	0.754137	
CPU_Freq[960000]: 0.455212	0.662295	0.655472	
CPU_Freq[806400]: 0.411228	0.569656	0.58468	
CPU_Freq[652800]: 0.380426	0.494731	0.541762	
CPU_Freq[499200]: 0.362805	0.43752	0.526718	
CPU_Freq[345600]: 0.358367	0.398022	0.539547	
Memory Frequency: 1062400000: 
Cluster 0: 
CPU_Freq[2035200]: 1.85663	3.46055	
CPU_Freq[1881600]: 1.60824	3.03114	
CPU_Freq[1728000]: 1.38386	2.64227	
CPU_Freq[1574400]: 1.18347	2.29393	
CPU_Freq[1420800]: 1.00709	1.98612	
CPU_Freq[1267200]: 0.854716	1.71885	
CPU_Freq[1113600]: 0.72634	1.49211	
CPU_Freq[960000]: 0.621967	1.30591	
CPU_Freq[806400]: 0.541597	1.16024	
CPU_Freq[652800]: 0.485229	1.0551	
CPU_Freq[499200]: 0.452863	0.990496	
CPU_Freq[345600]: 0.4445	0.966428	
Cluster 1: 
CPU_Freq[2035200]: 1.1322	1.80675	1.93148	
CPU_Freq[1881600]: 0.995941	1.59011	1.66557	
CPU_Freq[1728000]: 0.872864	1.39119	1.42753	
CPU_Freq[1574400]: 0.76297	1.20999	1.21737	
CPU_Freq[1420800]: 0.666257	1.04649	1.03509	
CPU_Freq[1267200]: 0.582727	0.900713	0.880676	
CPU_Freq[1113600]: 0.512378	0.772647	0.754137	
CPU_Freq[960000]: 0.455212	0.662295	0.655472	
CPU_Freq[806400]: 0.411228	0.569656	0.58468	
CPU_Freq[652800]: 0.380426	0.494731	0.541762	
CPU_Freq[499200]: 0.362805	0.43752	0.526718	
CPU_Freq[345600]: 0.358367	0.398022	0.539547	
Memory Frequency: 800000000: 
Cluster 0: 
CPU_Freq[2035200]: 1.85663	3.46055	
CPU_Freq[1881600]: 1.60824	3.03114	
CPU_Freq[1728000]: 1.38386	2.64227	
CPU_Freq[1574400]: 1.18347	2.29393	
CPU_Freq[1420800]: 1.00709	1.98612	
CPU_Freq[1267200]: 0.854716	1.71885	
CPU_Freq[1113600]: 0.72634	1.49211	
CPU_Freq[960000]: 0.621967	1.30591	
CPU_Freq[806400]: 0.541597	1.16024	
CPU_Freq[652800]: 0.485229	1.0551	
CPU_Freq[499200]: 0.452863	0.990496	
CPU_Freq[345600]: 0.4445	0.966428	
Cluster 1: 
CPU_Freq[2035200]: 1.1322	1.80675	1.93148	
CPU_Freq[1881600]: 0.995941	1.59011	1.66557	
CPU_Freq[1728000]: 0.872864	1.39119	1.42753	
CPU_Freq[1574400]: 0.76297	1.20999	1.21737	
CPU_Freq[1420800]: 0.666257	1.04649	1.03509	
CPU_Freq[1267200]: 0.582727	0.900713	0.880676	
CPU_Freq[1113600]: 0.512378	0.772647	0.754137	
CPU_Freq[960000]: 0.455212	0.662295	0.655472	
CPU_Freq[806400]: 0.411228	0.569656	0.58468	
CPU_Freq[652800]: 0.380426	0.494731	0.541762	
CPU_Freq[499200]: 0.362805	0.43752	0.526718	
CPU_Freq[345600]: 0.358367	0.398022	0.539547	

---------- Memory Power Predictions ---------- 
Memory Frequency: 1866000000: 
Cluster 0: 
CPU_Freq[2035200]: 1.10973	6.61548	
CPU_Freq[1881600]: 1.11684	6.23443	
CPU_Freq[1728000]: 1.12112	5.8493	
CPU_Freq[1574400]: 1.12255	5.46009	
CPU_Freq[1420800]: 1.12114	5.06679	
CPU_Freq[1267200]: 1.11689	4.66942	
CPU_Freq[1113600]: 1.1098	4.26797	
CPU_Freq[960000]: 1.09987	3.86244	
CPU_Freq[806400]: 1.08709	3.45283	
CPU_Freq[652800]: 1.07148	3.03914	
CPU_Freq[499200]: 1.05302	2.62138	
CPU_Freq[345600]: 1.03172	2.19953	
Cluster 1: 
CPU_Freq[2035200]: 1.85035	1.28774	2.37114	
CPU_Freq[1881600]: 1.83048	1.2882	2.33488	
CPU_Freq[1728000]: 1.80876	1.28576	2.29674	
CPU_Freq[1574400]: 1.78521	1.28041	2.25672	
CPU_Freq[1420800]: 1.75982	1.27216	2.2148	
CPU_Freq[1267200]: 1.73259	1.26101	2.171	
CPU_Freq[1113600]: 1.70352	1.24695	2.1253	
CPU_Freq[960000]: 1.67261	1.22998	2.07772	
CPU_Freq[806400]: 1.63986	1.21011	2.02825	
CPU_Freq[652800]: 1.60528	1.18734	1.97689	
CPU_Freq[499200]: 1.56885	1.16166	1.92365	
CPU_Freq[345600]: 1.53059	1.13308	1.86851	
Memory Frequency: 1600000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.720326	6.38625	
CPU_Freq[1881600]: 0.72732	6.00606	
CPU_Freq[1728000]: 0.731472	5.62179	
CPU_Freq[1574400]: 0.732783	5.23344	
CPU_Freq[1420800]: 0.731252	4.84101	
CPU_Freq[1267200]: 0.72688	4.4445	
CPU_Freq[1113600]: 0.719666	4.04392	
CPU_Freq[960000]: 0.709612	3.63925	
CPU_Freq[806400]: 0.696715	3.2305	
CPU_Freq[652800]: 0.680978	2.81768	
CPU_Freq[499200]: 0.662399	2.40077	
CPU_Freq[345600]: 0.640978	1.97979	
Cluster 1: 
CPU_Freq[2035200]: 1.45646	0.885648	1.98631	
CPU_Freq[1881600]: 1.43659	0.886115	1.95005	
CPU_Freq[1728000]: 1.41487	0.883677	1.91191	
CPU_Freq[1574400]: 1.39132	0.878335	1.87188	
CPU_Freq[1420800]: 1.36593	0.870088	1.82996	
CPU_Freq[1267200]: 1.3387	0.858937	1.78615	
CPU_Freq[1113600]: 1.30963	0.844881	1.74045	
CPU_Freq[960000]: 1.27872	0.82792	1.69286	
CPU_Freq[806400]: 1.24597	0.808055	1.64339	
CPU_Freq[652800]: 1.21139	0.785286	1.59203	
CPU_Freq[499200]: 1.17496	0.759612	1.53877	
CPU_Freq[345600]: 1.1367	0.731033	1.48363	
Memory Frequency: 1331200000: 
Cluster 0: 
CPU_Freq[2035200]: 0.441929	6.26007	
CPU_Freq[1881600]: 0.448799	5.88075	
CPU_Freq[1728000]: 0.452827	5.49735	
CPU_Freq[1574400]: 0.454015	5.10988	
CPU_Freq[1420800]: 0.45236	4.71832	
CPU_Freq[1267200]: 0.447865	4.32269	
CPU_Freq[1113600]: 0.440528	3.92297	
CPU_Freq[960000]: 0.43035	3.51918	
CPU_Freq[806400]: 0.41733	3.11131	
CPU_Freq[652800]: 0.401469	2.69936	
CPU_Freq[499200]: 0.382766	2.28332	
CPU_Freq[345600]: 0.361223	1.86321	
Cluster 1: 
CPU_Freq[2035200]: 1.193	0.603816	1.72467	
CPU_Freq[1881600]: 1.17312	0.604287	1.68841	
CPU_Freq[1728000]: 1.15141	0.601854	1.65026	
CPU_Freq[1574400]: 1.12785	0.596516	1.61023	
CPU_Freq[1420800]: 1.10246	0.588274	1.5683	
CPU_Freq[1267200]: 1.07523	0.577127	1.52449	
CPU_Freq[1113600]: 1.04616	0.563075	1.47878	
CPU_Freq[960000]: 1.01526	0.546119	1.43119	
CPU_Freq[806400]: 0.982509	0.526259	1.38171	
CPU_Freq[652800]: 0.947924	0.503494	1.33035	
CPU_Freq[499200]: 0.911499	0.477824	1.27709	
CPU_Freq[345600]: 0.873237	0.44925	1.22195	
Memory Frequency: 1062400000: 
Cluster 0: 
CPU_Freq[2035200]: 0.279236	6.23991	
CPU_Freq[1881600]: 0.285982	5.86147	
CPU_Freq[1728000]: 0.289887	5.47895	
CPU_Freq[1574400]: 0.290951	5.09234	
CPU_Freq[1420800]: 0.289174	4.70166	
CPU_Freq[1267200]: 0.284555	4.3069	
CPU_Freq[1113600]: 0.277095	3.90806	
CPU_Freq[960000]: 0.266793	3.50514	
CPU_Freq[806400]: 0.25365	3.09814	
CPU_Freq[652800]: 0.237665	2.68706	
CPU_Freq[499200]: 0.218839	2.2719	
CPU_Freq[345600]: 0.197172	1.85266	
Cluster 1: 
CPU_Freq[2035200]: 1.06481	0.447128	1.59094	
CPU_Freq[1881600]: 1.04493	0.447604	1.55468	
CPU_Freq[1728000]: 1.02322	0.445175	1.51652	
CPU_Freq[1574400]: 0.999667	0.439841	1.47648	
CPU_Freq[1420800]: 0.974276	0.431603	1.43455	
CPU_Freq[1267200]: 0.947045	0.420461	1.39073	
CPU_Freq[1113600]: 0.917976	0.406414	1.34503	
CPU_Freq[960000]: 0.887068	0.389462	1.29743	
CPU_Freq[806400]: 0.854321	0.369606	1.24795	
CPU_Freq[652800]: 0.819736	0.346846	1.19657	
CPU_Freq[499200]: 0.783312	0.321181	1.14331	
CPU_Freq[345600]: 0.745049	0.292611	1.08816	
Memory Frequency: 800000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.232022	6.32251	
CPU_Freq[1881600]: 0.238648	5.94492	
CPU_Freq[1728000]: 0.242433	5.56325	
CPU_Freq[1574400]: 0.243376	5.17749	
CPU_Freq[1420800]: 0.241478	4.78766	
CPU_Freq[1267200]: 0.236739	4.39375	
CPU_Freq[1113600]: 0.229158	3.99576	
CPU_Freq[960000]: 0.218736	3.5937	
CPU_Freq[806400]: 0.205472	3.18755	
CPU_Freq[652800]: 0.189367	2.77732	
CPU_Freq[499200]: 0.170421	2.36301	
CPU_Freq[345600]: 0.148633	1.94463	
Cluster 1: 
CPU_Freq[2035200]: 1.07016	0.41488	1.58377	
CPU_Freq[1881600]: 1.05028	0.41536	1.5475	
CPU_Freq[1728000]: 1.02857	0.412936	1.50934	
CPU_Freq[1574400]: 1.00502	0.407607	1.46929	
CPU_Freq[1420800]: 0.979623	0.399373	1.42736	
CPU_Freq[1267200]: 0.952393	0.388235	1.38354	
CPU_Freq[1113600]: 0.923324	0.374192	1.33782	
CPU_Freq[960000]: 0.892416	0.357245	1.29022	
CPU_Freq[806400]: 0.859669	0.337393	1.24074	
CPU_Freq[652800]: 0.825084	0.314637	1.18936	
CPU_Freq[499200]: 0.788659	0.288977	1.13609	
CPU_Freq[345600]: 0.750397	0.260411	1.08094	

[Congratulations!] All the training Phase finished. Training finished time: 1687727512997. Set the CPU frequency of all clusters back to the highest frequency
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.2392% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.7608% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.0391% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.9609% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 33.2187% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 66.7813% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.0174% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.9826% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.0616% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.9384% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1313% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8687% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1123% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8877% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.3411% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.6589% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5237% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4763% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.2192% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.7808% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1634% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8366% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.19% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.81% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1597% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8403% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.2027% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.7973% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1727% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8273% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1468% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8532% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.2204% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.7796% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.2298% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.7702% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.245% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.755% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.201% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.799% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1731% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8269% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1672% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8328% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1653% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8347% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.157% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.843% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.4513% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.5487% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5711% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4289% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.215% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.785% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1804% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8196% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5754% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4246% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5095% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4905% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.55% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.45% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5819% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4181% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.65% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.35% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5848% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4152% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.801% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.199% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.6515% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.3485% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.7207% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.2794% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.6363% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.3637% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.6255% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.3745% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.8257% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.1743% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.717% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.283% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.6725% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.3275% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.6292% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.3708% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.6964% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.3036% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.7109% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.2891% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.6296% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.3704% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.7167% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.2833% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.8033% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.1967% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.8001% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.1999% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.9269% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.0731% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.8866% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.1134% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.9234% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.0766% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.8784% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.1216% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.7114% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.2885% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.8549% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.1451% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.8373% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.1627% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.9163% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.0837% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.564% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.436% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.6969% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.3031% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.7008% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.2992% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.9734% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.0266% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.7944% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.2056% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.2153% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.7847% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5855% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4145% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.4544% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.5456% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5272% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4728% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.6163% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.3837% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1471% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8529% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1641% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8359% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1751% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8249% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.208% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.792% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.4432% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.5568% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.4445% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.5555% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5255% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4745% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5191% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4809% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.6137% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.3863% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.6213% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.3787% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.605% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.395% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.481% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.519% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.4671% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.5329% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5462% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4538% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.4484% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.5516% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5529% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4471% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5179% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4821% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.5451% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.4549% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.7344% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.2656% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 34.7333% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 65.2666% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1226% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8774% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.2793% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.7207% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.1618% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.8382% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.2945% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.7055% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.2114% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.7887% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <1> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 35.3021% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 64.6979% of tasks should be scheduled to cluster 1
Thread 0 sleeps for 283456 ms. 
Task type: 0: Thread 0 with width 1 completes 4865 tasks.
Task type: 0: Thread 0 with width 2 completes 9 tasks.
Task type: 0: Thread 0 with width 4 completes 0 tasks.
Task type: 1: Thread 0 with width 1 completes 0 tasks.
Task type: 1: Thread 0 with width 2 completes 0 tasks.
Task type: 1: Thread 0 with width 4 completes 0 tasks.
Task type: 2: Thread 0 with width 1 completes 0 tasks.
Task type: 2: Thread 0 with width 2 completes 0 tasks.
Task type: 2: Thread 0 with width 4 completes 0 tasks.
Task type: 3: Thread 0 with width 1 completes 0 tasks.
Task type: 3: Thread 0 with width 2 completes 0 tasks.
Task type: 3: Thread 0 with width 4 completes 0 tasks.
Task type: 4: Thread 0 with width 1 completes 0 tasks.
Task type: 4: Thread 0 with width 2 completes 0 tasks.
Task type: 4: Thread 0 with width 4 completes 0 tasks.
Task type: 5: Thread 0 with width 1 completes 0 tasks.
Task type: 5: Thread 0 with width 2 completes 0 tasks.
Task type: 5: Thread 0 with width 4 completes 0 tasks.
The total execution time of thread 0 is 84.9149 s.
Thread 2 sleeps for 247329 ms. 
Task type: 0: Thread 2 with width 1 completes 3275 tasks.
Task type: 0: Thread 2 with width 2 completes 4 tasks.
Task type: 0: Thread 2 with width 4 completes 9 tasks.
Task type: 1: Thread 2 with width 1 completes 0 tasks.
Task type: 1: Thread 2 with width 2 completes 0 tasks.
Task type: 1: Thread 2 with width 4 completes 0 tasks.
Task type: 2: Thread 2 with width 1 completes 0 tasks.
Task type: 2: Thread 2 with width 2 completes 0 tasks.
Task type: 2: Thread 2 with width 4 completes 0 tasks.
Task type: 3: Thread 2 with width 1 completes 0 tasks.
Task type: 3: Thread 2 with width 2 completes 0 tasks.
Task type: 3: Thread 2 with width 4 completes 0 tasks.
Task type: 4: Thread 2 with width 1 completes 0 tasks.
Task type: 4: Thread 2 with width 2 completes 0 tasks.
Task type: 4: Thread 2 with width 4 completes 0 tasks.
Task type: 5: Thread 2 with width 1 completes 0 tasks.
Task type: 5: Thread 2 with width 2 completes 0 tasks.
Task type: 5: Thread 2 with width 4 completes 0 tasks.
The total execution time of thread 2 is 124.147 s.
Thread 4 sleeps for 199879 ms. 
Task type: 0: Thread 4 with width 1 completes 4647 tasks.
Task type: 0: Thread 4 with width 2 completes 3 tasks.
Task type: 0: Thread 4 with width 4 completes 9 tasks.
Task type: 1: Thread 4 with width 1 completes 0 tasks.
Task type: 1: Thread 4 with width 2 completes 0 tasks.
Task type: 1: Thread 4 with width 4 completes 0 tasks.
Task type: 2: Thread 4 with width 1 completes 0 tasks.
Task type: 2: Thread 4 with width 2 completes 0 tasks.
Task type: 2: Thread 4 with width 4 completes 0 tasks.
Task type: 3: Thread 4 with width 1 completes 0 tasks.
Task type: 3: Thread 4 with width 2 completes 0 tasks.
Task type: 3: Thread 4 with width 4 completes 0 tasks.
Task type: 4: Thread 4 with width 1 completes 0 tasks.
Task type: 4: Thread 4 with width 2 completes 0 tasks.
Task type: 4: Thread 4 with width 4 completes 0 tasks.
Task type: 5: Thread 4 with width 1 completes 0 tasks.
Task type: 5: Thread 4 with width 2 completes 0 tasks.
Task type: 5: Thread 4 with width 4 completes 0 tasks.
The total execution time of thread 4 is 171.715 s.
Thread 3 sleeps for 346997 ms. 
Task type: 0: Thread 3 with width 1 completes 648 tasks.
Task type: 0: Thread 3 with width 2 completes 4 tasks.
Task type: 0: Thread 3 with width 4 completes 9 tasks.
Task type: 1: Thread 3 with width 1 completes 0 tasks.
Task type: 1: Thread 3 with width 2 completes 0 tasks.
Task type: 1: Thread 3 with width 4 completes 0 tasks.
Task type: 2: Thread 3 with width 1 completes 0 tasks.
Task type: 2: Thread 3 with width 2 completes 0 tasks.
Task type: 2: Thread 3 with width 4 completes 0 tasks.
Task type: 3: Thread 3 with width 1 completes 0 tasks.
Task type: 3: Thread 3 with width 2 completes 0 tasks.
Task type: 3: Thread 3 with width 4 completes 0 tasks.
Task type: 4: Thread 3 with width 1 completes 0 tasks.
Task type: 4: Thread 3 with width 2 completes 0 tasks.
Task type: 4: Thread 3 with width 4 completes 0 tasks.
Task type: 5: Thread 3 with width 1 completes 0 tasks.
Task type: 5: Thread 3 with width 2 completes 0 tasks.
Task type: 5: Thread 3 with width 4 completes 0 tasks.
The total execution time of thread 3 is 24.2607 s.
Thread 1 sleeps for 279270 ms. 
Task type: 0: Thread 1 with width 1 completes 5127 tasks.
Task type: 0: Thread 1 with width 2 completes 9 tasks.
Task type: 0: Thread 1 with width 4 completes 0 tasks.
Task type: 1: Thread 1 with width 1 completes 0 tasks.
Task type: 1: Thread 1 with width 2 completes 0 tasks.
Task type: 1: Thread 1 with width 4 completes 0 tasks.
Task type: 2: Thread 1 with width 1 completes 0 tasks.
Task type: 2: Thread 1 with width 2 completes 0 tasks.
Task type: 2: Thread 1 with width 4 completes 0 tasks.
Task type: 3: Thread 1 with width 1 completes 0 tasks.
Task type: 3: Thread 1 with width 2 completes 0 tasks.
Task type: 3: Thread 1 with width 4 completes 0 tasks.
Task type: 4: Thread 1 with width 1 completes 0 tasks.
Task type: 4: Thread 1 with width 2 completes 0 tasks.
Task type: 4: Thread 1 with width 4 completes 0 tasks.
Task type: 5: Thread 1 with width 1 completes 0 tasks.
Task type: 5: Thread 1 with width 2 completes 0 tasks.
Task type: 5: Thread 1 with width 4 completes 0 tasks.
The total execution time of thread 1 is 89.032 s.
Thread 5 sleeps for 319042 ms. 
Task type: 0: Thread 5 with width 1 completes 1413 tasks.
Task type: 0: Thread 5 with width 2 completes 3 tasks.
Task type: 0: Thread 5 with width 4 completes 9 tasks.
Task type: 1: Thread 5 with width 1 completes 0 tasks.
Task type: 1: Thread 5 with width 2 completes 0 tasks.
Task type: 1: Thread 5 with width 4 completes 0 tasks.
Task type: 2: Thread 5 with width 1 completes 0 tasks.
Task type: 2: Thread 5 with width 2 completes 0 tasks.
Task type: 2: Thread 5 with width 4 completes 0 tasks.
Task type: 3: Thread 5 with width 1 completes 0 tasks.
Task type: 3: Thread 5 with width 2 completes 0 tasks.
Task type: 3: Thread 5 with width 4 completes 0 tasks.
Task type: 4: Thread 5 with width 1 completes 0 tasks.
Task type: 4: Thread 5 with width 2 completes 0 tasks.
Task type: 4: Thread 5 with width 4 completes 0 tasks.
Task type: 5: Thread 5 with width 1 completes 0 tasks.
Task type: 5: Thread 5 with width 2 completes 0 tasks.
Task type: 5: Thread 5 with width 4 completes 0 tasks.
The total execution time of thread 5 is 52.3476 s.
20000,2,1687727511827	1687727884065,372.239,53.7289
Total number of steals across clusters: 0


---------------------- Test Application - Synthetic Benchmarks ---------------------
---------------------- You choose Paper4 scheduler ---------------------
[Warning] CP->Memory-boundness (ClusterA) is smaller than 0!
[Warning] CP->Memory-boundness (ClusterA) is smaller than 0!
CP: Training Phase finished. Predicted execution time and power results for the kernel tasks: 

---------- Execution Time Predictions ---------- 
Memory Frequency: 1866000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0165863	0.00886043	
CPU_Freq[1881600]: 0.0183456	0.00933336	
CPU_Freq[1728000]: 0.0198367	0.010232	
CPU_Freq[1574400]: 0.021628	0.011306	
CPU_Freq[1420800]: 0.0238201	0.0126122	
CPU_Freq[1267200]: 0.0265643	0.014235	
CPU_Freq[1113600]: 0.0306053	0.0194508	
CPU_Freq[960000]: 0.0348215	0.0190386	
CPU_Freq[806400]: 0.0414502	0.0228129	
CPU_Freq[652800]: 0.0514236	0.0283633	
CPU_Freq[499200]: 0.0681007	0.0373293	
CPU_Freq[345600]: 0.101511	0.0542652	
Cluster 1: 
CPU_Freq[2035200]: 0.0413137	0.0297598	0.0180122	
CPU_Freq[1881600]: 0.0422172	0.030168	0.0182232	
CPU_Freq[1728000]: 0.0440197	0.0312757	0.0186033	
CPU_Freq[1574400]: 0.0461904	0.0326139	0.0190712	
CPU_Freq[1420800]: 0.0488548	0.0342625	0.0196605	
CPU_Freq[1267200]: 0.0522022	0.0363429	0.0204235	
CPU_Freq[1113600]: 0.0554471	0.0386971	0.0218242	
CPU_Freq[960000]: 0.0623522	0.0427102	0.0228826	
CPU_Freq[806400]: 0.0705803	0.0479325	0.0250249	
CPU_Freq[652800]: 0.0830854	0.0559631	0.0285115	
CPU_Freq[499200]: 0.104304	0.0698176	0.0349889	
CPU_Freq[345600]: 0.147814	0.09896	0.0500725	
Memory Frequency: 1600000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0170461	0.0085721	
CPU_Freq[1881600]: 0.0182965	0.00933032	
CPU_Freq[1728000]: 0.0197758	0.0102233	
CPU_Freq[1574400]: 0.0215528	0.0112906	
CPU_Freq[1420800]: 0.0237277	0.0125886	
CPU_Freq[1267200]: 0.0264505	0.0142014	
CPU_Freq[1113600]: 0.0299576	0.0162589	
CPU_Freq[960000]: 0.0346442	0.018975	
CPU_Freq[806400]: 0.041223	0.0227257	
CPU_Freq[652800]: 0.051123	0.0282414	
CPU_Freq[499200]: 0.0676817	0.0371514	
CPU_Freq[345600]: 0.100868	0.0539814	
Cluster 1: 
CPU_Freq[2035200]: 0.0427976	0.0309933	0.019206	
CPU_Freq[1881600]: 0.0443041	0.0319085	0.0195076	
CPU_Freq[1728000]: 0.0460902	0.0329965	0.0198724	
CPU_Freq[1574400]: 0.0482413	0.0343112	0.0203222	
CPU_Freq[1420800]: 0.0508819	0.0359313	0.0208895	
CPU_Freq[1267200]: 0.0541997	0.0379763	0.0216251	
CPU_Freq[1113600]: 0.0584927	0.0406372	0.0226133	
CPU_Freq[960000]: 0.064262	0.0442387	0.024003	
CPU_Freq[806400]: 0.0724213	0.0493785	0.0260816	
CPU_Freq[652800]: 0.0848251	0.0572878	0.0294744	
CPU_Freq[499200]: 0.10588	0.0709464	0.0358003	
CPU_Freq[345600]: 0.149081	0.0997188	0.0505979	
Memory Frequency: 1331200000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0170799	0.00857455	
CPU_Freq[1881600]: 0.0183161	0.00932603	
CPU_Freq[1728000]: 0.0197785	0.0102111	
CPU_Freq[1574400]: 0.0215355	0.0112689	
CPU_Freq[1420800]: 0.0236859	0.0125553	
CPU_Freq[1267200]: 0.0263783	0.0141537	
CPU_Freq[1113600]: 0.0298467	0.0161929	
CPU_Freq[960000]: 0.0344821	0.0188848	
CPU_Freq[806400]: 0.0409903	0.0226021	
CPU_Freq[652800]: 0.0507864	0.0280687	
CPU_Freq[499200]: 0.0671772	0.0368993	
CPU_Freq[345600]: 0.100047	0.0535795	
Cluster 1: 
CPU_Freq[2035200]: 0.0458144	0.0335494	0.0210848	
CPU_Freq[1881600]: 0.0473012	0.034441	0.0213681	
CPU_Freq[1728000]: 0.049064	0.0355012	0.0217115	
CPU_Freq[1574400]: 0.0511874	0.0367827	0.0221356	
CPU_Freq[1420800]: 0.0537942	0.0383623	0.0226716	
CPU_Freq[1267200]: 0.0570701	0.0403571	0.0233684	
CPU_Freq[1113600]: 0.0613095	0.0429539	0.024307	
CPU_Freq[960000]: 0.0670082	0.0464708	0.0256313	
CPU_Freq[806400]: 0.07507	0.0514938	0.0276196	
CPU_Freq[652800]: 0.0873303	0.0592313	0.0308797	
CPU_Freq[499200]: 0.108153	0.0726125	0.036991	
CPU_Freq[345600]: 0.150917	0.100861	0.0513833	
Memory Frequency: 1062400000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0173279	0.00857825	
CPU_Freq[1881600]: 0.0185426	0.00931955	
CPU_Freq[1728000]: 0.0199797	0.0101926	
CPU_Freq[1574400]: 0.0217064	0.0112361	
CPU_Freq[1420800]: 0.0238199	0.0125052	
CPU_Freq[1267200]: 0.0264666	0.0140819	
CPU_Freq[1113600]: 0.0298766	0.0160935	
CPU_Freq[960000]: 0.034435	0.018749	
CPU_Freq[806400]: 0.0408368	0.0224159	
CPU_Freq[652800]: 0.0504764	0.0278086	
CPU_Freq[499200]: 0.0666146	0.0365197	
CPU_Freq[345600]: 0.0990067	0.0529742	
Cluster 1: 
CPU_Freq[2035200]: 0.0504483	0.0375473	0.0240057	
CPU_Freq[1881600]: 0.0519054	0.0384034	0.0242615	
CPU_Freq[1728000]: 0.0536333	0.0394217	0.0245725	
CPU_Freq[1574400]: 0.0557148	0.0406532	0.0249579	
CPU_Freq[1420800]: 0.0582708	0.0421719	0.0254468	
CPU_Freq[1267200]: 0.0614835	0.044091	0.0260851	
CPU_Freq[1113600]: 0.0656423	0.0465914	0.0269492	
CPU_Freq[960000]: 0.0712347	0.0499809	0.028175	
CPU_Freq[806400]: 0.0791495	0.054828	0.0300273	
CPU_Freq[652800]: 0.0911938	0.0623068	0.0330873	
CPU_Freq[499200]: 0.111668	0.07527	0.0388756	
CPU_Freq[345600]: 0.153772	0.102729	0.0526576	
Memory Frequency: 800000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0182357	0.00858425	
CPU_Freq[1881600]: 0.0194154	0.00930904	
CPU_Freq[1728000]: 0.0208113	0.0101627	
CPU_Freq[1574400]: 0.0224888	0.0111829	
CPU_Freq[1420800]: 0.0245426	0.0124237	
CPU_Freq[1267200]: 0.0271149	0.0139652	
CPU_Freq[1113600]: 0.0304301	0.0159321	
CPU_Freq[960000]: 0.0348634	0.0185283	
CPU_Freq[806400]: 0.0410923	0.0221136	
CPU_Freq[652800]: 0.0504778	0.0273861	
CPU_Freq[499200]: 0.0662054	0.0359031	
CPU_Freq[345600]: 0.097822	0.0519909	
Cluster 1: 
CPU_Freq[2035200]: 0.0582076	0.0444219	0.0289843	
CPU_Freq[1881600]: 0.0596165	0.0452202	0.0291955	
CPU_Freq[1728000]: 0.0612875	0.0461705	0.0294539	
CPU_Freq[1574400]: 0.0633012	0.0473206	0.0297764	
CPU_Freq[1420800]: 0.0657745	0.0487405	0.0301889	
CPU_Freq[1267200]: 0.0688846	0.0505367	0.0307322	
CPU_Freq[1113600]: 0.0729126	0.0528803	0.0314751	
CPU_Freq[960000]: 0.0783321	0.0560629	0.0325409	
CPU_Freq[806400]: 0.0860083	0.0606242	0.0341723	
CPU_Freq[652800]: 0.0977016	0.0676829	0.0369074	
CPU_Freq[499200]: 0.117609	0.0799673	0.0421709	
CPU_Freq[345600]: 0.158642	0.106144	0.0549616	

---------- CPU Power Predictions ---------- 
Memory Frequency: 1866000000: 
Cluster 0: 
CPU_Freq[2035200]: 1.85663	3.13544	
CPU_Freq[1881600]: 1.60824	2.70275	
CPU_Freq[1728000]: 1.38386	2.3106	
CPU_Freq[1574400]: 1.18347	1.95897	
CPU_Freq[1420800]: 1.00709	1.64789	
CPU_Freq[1267200]: 0.854716	1.37733	
CPU_Freq[1113600]: 0.72634	1.14731	
CPU_Freq[960000]: 0.621967	0.957823	
CPU_Freq[806400]: 0.541597	0.80887	
CPU_Freq[652800]: 0.485229	0.70045	
CPU_Freq[499200]: 0.452863	0.632565	
CPU_Freq[345600]: 0.4445	0.605213	
Cluster 1: 
CPU_Freq[2035200]: 1.14776	1.48462	1.95322	
CPU_Freq[1881600]: 1.00935	1.30083	1.68515	
CPU_Freq[1728000]: 0.884113	1.13476	1.44495	
CPU_Freq[1574400]: 0.772062	0.986407	1.23263	
CPU_Freq[1420800]: 0.673193	0.855764	1.04818	
CPU_Freq[1267200]: 0.587506	0.742835	0.891611	
CPU_Freq[1113600]: 0.515002	0.647619	0.76291	
CPU_Freq[960000]: 0.455679	0.570117	0.662084	
CPU_Freq[806400]: 0.409539	0.510328	0.58913	
CPU_Freq[652800]: 0.37658	0.468253	0.544051	
CPU_Freq[499200]: 0.356804	0.443892	0.526845	
CPU_Freq[345600]: 0.350209	0.437244	0.537513	
Memory Frequency: 1600000000: 
Cluster 0: 
CPU_Freq[2035200]: 1.85663	3.13544	
CPU_Freq[1881600]: 1.60824	2.70275	
CPU_Freq[1728000]: 1.38386	2.3106	
CPU_Freq[1574400]: 1.18347	1.95897	
CPU_Freq[1420800]: 1.00709	1.64789	
CPU_Freq[1267200]: 0.854716	1.37733	
CPU_Freq[1113600]: 0.72634	1.14731	
CPU_Freq[960000]: 0.621967	0.957823	
CPU_Freq[806400]: 0.541597	0.80887	
CPU_Freq[652800]: 0.485229	0.70045	
CPU_Freq[499200]: 0.452863	0.632565	
CPU_Freq[345600]: 0.4445	0.605213	
Cluster 1: 
CPU_Freq[2035200]: 1.14776	1.48462	1.95322	
CPU_Freq[1881600]: 1.00935	1.30083	1.68515	
CPU_Freq[1728000]: 0.884113	1.13476	1.44495	
CPU_Freq[1574400]: 0.772062	0.986407	1.23263	
CPU_Freq[1420800]: 0.673193	0.855764	1.04818	
CPU_Freq[1267200]: 0.587506	0.742835	0.891611	
CPU_Freq[1113600]: 0.515002	0.647619	0.76291	
CPU_Freq[960000]: 0.455679	0.570117	0.662084	
CPU_Freq[806400]: 0.409539	0.510328	0.58913	
CPU_Freq[652800]: 0.37658	0.468253	0.544051	
CPU_Freq[499200]: 0.356804	0.443892	0.526845	
CPU_Freq[345600]: 0.350209	0.437244	0.537513	
Memory Frequency: 1331200000: 
Cluster 0: 
CPU_Freq[2035200]: 1.85663	3.13544	
CPU_Freq[1881600]: 1.60824	2.70275	
CPU_Freq[1728000]: 1.38386	2.3106	
CPU_Freq[1574400]: 1.18347	1.95897	
CPU_Freq[1420800]: 1.00709	1.64789	
CPU_Freq[1267200]: 0.854716	1.37733	
CPU_Freq[1113600]: 0.72634	1.14731	
CPU_Freq[960000]: 0.621967	0.957823	
CPU_Freq[806400]: 0.541597	0.80887	
CPU_Freq[652800]: 0.485229	0.70045	
CPU_Freq[499200]: 0.452863	0.632565	
CPU_Freq[345600]: 0.4445	0.605213	
Cluster 1: 
CPU_Freq[2035200]: 1.14776	1.48462	1.95322	
CPU_Freq[1881600]: 1.00935	1.30083	1.68515	
CPU_Freq[1728000]: 0.884113	1.13476	1.44495	
CPU_Freq[1574400]: 0.772062	0.986407	1.23263	
CPU_Freq[1420800]: 0.673193	0.855764	1.04818	
CPU_Freq[1267200]: 0.587506	0.742835	0.891611	
CPU_Freq[1113600]: 0.515002	0.647619	0.76291	
CPU_Freq[960000]: 0.455679	0.570117	0.662084	
CPU_Freq[806400]: 0.409539	0.510328	0.58913	
CPU_Freq[652800]: 0.37658	0.468253	0.544051	
CPU_Freq[499200]: 0.356804	0.443892	0.526845	
CPU_Freq[345600]: 0.350209	0.437244	0.537513	
Memory Frequency: 1062400000: 
Cluster 0: 
CPU_Freq[2035200]: 1.85663	3.13544	
CPU_Freq[1881600]: 1.60824	2.70275	
CPU_Freq[1728000]: 1.38386	2.3106	
CPU_Freq[1574400]: 1.18347	1.95897	
CPU_Freq[1420800]: 1.00709	1.64789	
CPU_Freq[1267200]: 0.854716	1.37733	
CPU_Freq[1113600]: 0.72634	1.14731	
CPU_Freq[960000]: 0.621967	0.957823	
CPU_Freq[806400]: 0.541597	0.80887	
CPU_Freq[652800]: 0.485229	0.70045	
CPU_Freq[499200]: 0.452863	0.632565	
CPU_Freq[345600]: 0.4445	0.605213	
Cluster 1: 
CPU_Freq[2035200]: 1.14776	1.48462	1.95322	
CPU_Freq[1881600]: 1.00935	1.30083	1.68515	
CPU_Freq[1728000]: 0.884113	1.13476	1.44495	
CPU_Freq[1574400]: 0.772062	0.986407	1.23263	
CPU_Freq[1420800]: 0.673193	0.855764	1.04818	
CPU_Freq[1267200]: 0.587506	0.742835	0.891611	
CPU_Freq[1113600]: 0.515002	0.647619	0.76291	
CPU_Freq[960000]: 0.455679	0.570117	0.662084	
CPU_Freq[806400]: 0.409539	0.510328	0.58913	
CPU_Freq[652800]: 0.37658	0.468253	0.544051	
CPU_Freq[499200]: 0.356804	0.443892	0.526845	
CPU_Freq[345600]: 0.350209	0.437244	0.537513	
Memory Frequency: 800000000: 
Cluster 0: 
CPU_Freq[2035200]: 1.85663	3.13544	
CPU_Freq[1881600]: 1.60824	2.70275	
CPU_Freq[1728000]: 1.38386	2.3106	
CPU_Freq[1574400]: 1.18347	1.95897	
CPU_Freq[1420800]: 1.00709	1.64789	
CPU_Freq[1267200]: 0.854716	1.37733	
CPU_Freq[1113600]: 0.72634	1.14731	
CPU_Freq[960000]: 0.621967	0.957823	
CPU_Freq[806400]: 0.541597	0.80887	
CPU_Freq[652800]: 0.485229	0.70045	
CPU_Freq[499200]: 0.452863	0.632565	
CPU_Freq[345600]: 0.4445	0.605213	
Cluster 1: 
CPU_Freq[2035200]: 1.14776	1.48462	1.95322	
CPU_Freq[1881600]: 1.00935	1.30083	1.68515	
CPU_Freq[1728000]: 0.884113	1.13476	1.44495	
CPU_Freq[1574400]: 0.772062	0.986407	1.23263	
CPU_Freq[1420800]: 0.673193	0.855764	1.04818	
CPU_Freq[1267200]: 0.587506	0.742835	0.891611	
CPU_Freq[1113600]: 0.515002	0.647619	0.76291	
CPU_Freq[960000]: 0.455679	0.570117	0.662084	
CPU_Freq[806400]: 0.409539	0.510328	0.58913	
CPU_Freq[652800]: 0.37658	0.468253	0.544051	
CPU_Freq[499200]: 0.356804	0.443892	0.526845	
CPU_Freq[345600]: 0.350209	0.437244	0.537513	

---------- Memory Power Predictions ---------- 
Memory Frequency: 1866000000: 
Cluster 0: 
CPU_Freq[2035200]: 1.10973	1.11309	
CPU_Freq[1881600]: 1.11684	1.12451	
CPU_Freq[1728000]: 1.12112	1.13185	
CPU_Freq[1574400]: 1.12255	1.13512	
CPU_Freq[1420800]: 1.12114	1.1343	
CPU_Freq[1267200]: 1.11689	1.12941	
CPU_Freq[1113600]: 1.1098	1.12044	
CPU_Freq[960000]: 1.09987	1.10738	
CPU_Freq[806400]: 1.08709	1.09025	
CPU_Freq[652800]: 1.07148	1.06904	
CPU_Freq[499200]: 1.05302	1.04375	
CPU_Freq[345600]: 1.03172	1.01438	
Cluster 1: 
CPU_Freq[2035200]: 1.74466	1.99381	2.31842	
CPU_Freq[1881600]: 1.72779	1.97441	2.28342	
CPU_Freq[1728000]: 1.70907	1.95211	2.24652	
CPU_Freq[1574400]: 1.68851	1.92691	2.20774	
CPU_Freq[1420800]: 1.66612	1.89879	2.16707	
CPU_Freq[1267200]: 1.64188	1.86778	2.12451	
CPU_Freq[1113600]: 1.61581	1.83386	2.08006	
CPU_Freq[960000]: 1.5879	1.79703	2.03372	
CPU_Freq[806400]: 1.55815	1.7573	1.98549	
CPU_Freq[652800]: 1.52656	1.71467	1.93538	
CPU_Freq[499200]: 1.49314	1.66913	1.88338	
CPU_Freq[345600]: 1.45787	1.62069	1.82949	
Memory Frequency: 1600000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.720326	0.73183	
CPU_Freq[1881600]: 0.72732	0.744118	
CPU_Freq[1728000]: 0.731472	0.752325	
CPU_Freq[1574400]: 0.732783	0.756454	
CPU_Freq[1420800]: 0.731252	0.756503	
CPU_Freq[1267200]: 0.72688	0.752472	
CPU_Freq[1113600]: 0.719666	0.744362	
CPU_Freq[960000]: 0.709612	0.732172	
CPU_Freq[806400]: 0.696715	0.715903	
CPU_Freq[652800]: 0.680978	0.695555	
CPU_Freq[499200]: 0.662399	0.671127	
CPU_Freq[345600]: 0.640978	0.642619	
Cluster 1: 
CPU_Freq[2035200]: 1.34648	1.60806	1.93278	
CPU_Freq[1881600]: 1.3296	1.58867	1.89777	
CPU_Freq[1728000]: 1.31088	1.56637	1.86087	
CPU_Freq[1574400]: 1.29032	1.54117	1.82208	
CPU_Freq[1420800]: 1.26793	1.51306	1.7814	
CPU_Freq[1267200]: 1.2437	1.48205	1.73884	
CPU_Freq[1113600]: 1.21762	1.44814	1.69439	
CPU_Freq[960000]: 1.18971	1.41132	1.64804	
CPU_Freq[806400]: 1.15996	1.37159	1.59981	
CPU_Freq[652800]: 1.12838	1.32896	1.5497	
CPU_Freq[499200]: 1.09495	1.28343	1.49769	
CPU_Freq[345600]: 1.05968	1.23499	1.44379	
Memory Frequency: 1331200000: 
Cluster 0: 
CPU_Freq[2035200]: 0.441929	0.452034	
CPU_Freq[1881600]: 0.448799	0.465194	
CPU_Freq[1728000]: 0.452827	0.474274	
CPU_Freq[1574400]: 0.454015	0.479275	
CPU_Freq[1420800]: 0.45236	0.480197	
CPU_Freq[1267200]: 0.447865	0.477039	
CPU_Freq[1113600]: 0.440528	0.469802	
CPU_Freq[960000]: 0.43035	0.458485	
CPU_Freq[806400]: 0.41733	0.443089	
CPU_Freq[652800]: 0.401469	0.423613	
CPU_Freq[499200]: 0.382766	0.400058	
CPU_Freq[345600]: 0.361223	0.372424	
Cluster 1: 
CPU_Freq[2035200]: 1.07867	1.34275	1.67031	
CPU_Freq[1881600]: 1.06179	1.32336	1.6353	
CPU_Freq[1728000]: 1.04307	1.30106	1.59839	
CPU_Freq[1574400]: 1.02252	1.27587	1.5596	
CPU_Freq[1420800]: 1.00012	1.24776	1.51892	
CPU_Freq[1267200]: 0.97589	1.21676	1.47635	
CPU_Freq[1113600]: 0.949817	1.18285	1.43189	
CPU_Freq[960000]: 0.921906	1.14603	1.38555	
CPU_Freq[806400]: 0.892157	1.10631	1.33731	
CPU_Freq[652800]: 0.860568	1.06368	1.28719	
CPU_Freq[499200]: 0.827141	1.01815	1.23518	
CPU_Freq[345600]: 0.791875	0.969721	1.18128	
Memory Frequency: 1062400000: 
Cluster 0: 
CPU_Freq[2035200]: 0.279236	0.278262	
CPU_Freq[1881600]: 0.285982	0.292295	
CPU_Freq[1728000]: 0.289887	0.302248	
CPU_Freq[1574400]: 0.290951	0.308122	
CPU_Freq[1420800]: 0.289174	0.309917	
CPU_Freq[1267200]: 0.284555	0.307632	
CPU_Freq[1113600]: 0.277095	0.301267	
CPU_Freq[960000]: 0.266793	0.290823	
CPU_Freq[806400]: 0.25365	0.2763	
CPU_Freq[652800]: 0.237665	0.257697	
CPU_Freq[499200]: 0.218839	0.235015	
CPU_Freq[345600]: 0.197172	0.208253	
Cluster 1: 
CPU_Freq[2035200]: 0.946138	1.20257	1.53575	
CPU_Freq[1881600]: 0.92926	1.18319	1.50073	
CPU_Freq[1728000]: 0.910543	1.1609	1.46382	
CPU_Freq[1574400]: 0.889987	1.13571	1.42503	
CPU_Freq[1420800]: 0.867592	1.10761	1.38434	
CPU_Freq[1267200]: 0.843359	1.07661	1.34177	
CPU_Freq[1113600]: 0.817286	1.0427	1.29731	
CPU_Freq[960000]: 0.789375	1.00589	1.25095	
CPU_Freq[806400]: 0.759626	0.966172	1.20272	
CPU_Freq[652800]: 0.728037	0.923551	1.15259	
CPU_Freq[499200]: 0.69461	0.878026	1.10057	
CPU_Freq[345600]: 0.659344	0.829597	1.04667	
Memory Frequency: 800000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.232022	0.210897	
CPU_Freq[1881600]: 0.238648	0.225782	
CPU_Freq[1728000]: 0.242433	0.236587	
CPU_Freq[1574400]: 0.243376	0.243313	
CPU_Freq[1420800]: 0.241478	0.245959	
CPU_Freq[1267200]: 0.236739	0.244526	
CPU_Freq[1113600]: 0.229158	0.239014	
CPU_Freq[960000]: 0.218736	0.229422	
CPU_Freq[806400]: 0.205472	0.215751	
CPU_Freq[652800]: 0.189367	0.198	
CPU_Freq[499200]: 0.170421	0.17617	
CPU_Freq[345600]: 0.148633	0.15026	
Cluster 1: 
CPU_Freq[2035200]: 0.947246	1.18645	1.52777	
CPU_Freq[1881600]: 0.930368	1.16707	1.49275	
CPU_Freq[1728000]: 0.911651	1.14478	1.45583	
CPU_Freq[1574400]: 0.891095	1.11959	1.41703	
CPU_Freq[1420800]: 0.8687	1.0915	1.37634	
CPU_Freq[1267200]: 0.844466	1.0605	1.33376	
CPU_Freq[1113600]: 0.818394	1.0266	1.2893	
CPU_Freq[960000]: 0.790483	0.989793	1.24294	
CPU_Freq[806400]: 0.760733	0.950081	1.1947	
CPU_Freq[652800]: 0.729145	0.907465	1.14456	
CPU_Freq[499200]: 0.695718	0.861944	1.09254	
CPU_Freq[345600]: 0.660452	0.813519	1.03864	

[Congratulations!] All the training Phase finished. Training finished time: 1687727916664. Set the CPU frequency of all clusters back to the highest frequency
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 55.4648% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 44.5352% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <2> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 53.8251% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 46.1749% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 43.2827% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 56.7173% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.3482% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.6518% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.4056% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.5944% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.1975% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.8025% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.0135% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.9865% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.4782% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.5218% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.4008% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.5992% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.4376% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.5624% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.6774% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.3226% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.5463% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.4537% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.7978% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.2022% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.5452% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.4548% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.0876% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.9124% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.5674% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.4326% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.5206% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.4794% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.5109% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.4891% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.3516% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.6484% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.5629% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.4371% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.7338% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.2662% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.7079% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.2921% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.9066% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.0934% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.9106% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.0894% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <2> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.7343% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.2657% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.6437% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.3563% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.4157% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.5843% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.4967% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.5033% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.9537% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.0463% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.308% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.692% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.0043% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.9957% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.0042% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.9958% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.0116% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.9884% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.9484% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.0516% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.24% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.76% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.1938% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.8062% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.9709% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.0291% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.2706% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.7294% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.4805% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.5195% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.5254% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.4746% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.1988% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.8012% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.4952% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.5048% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.2127% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.7873% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 39.9485% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 60.0515% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.1728% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.8272% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.431% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.569% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.4434% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.5566% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.6196% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.3804% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.4372% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.5628% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.5733% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.4267% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.4869% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.5131% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.6079% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.3921% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.3389% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.6611% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.734% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.266% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.5198% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.4802% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.6447% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.3553% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.8883% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.1117% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.053% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.947% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.2829% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.7172% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.4298% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.5702% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.2044% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.7956% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.9891% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.0109% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.1595% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.8405% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.0941% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.9059% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.3353% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.6647% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.5842% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.4158% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.5551% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.4449% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.4248% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.5752% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.542% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.458% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.7178% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.2822% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.554% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.446% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.8453% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.1547% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.5191% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.4809% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.6606% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.3394% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.4209% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.5791% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.7237% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.2763% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.1966% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.8034% of tasks should be scheduled to cluster 1
Thread 0 sleeps for 108226 ms. 
Task type: 0: Thread 0 with width 1 completes 7876 tasks.
Task type: 0: Thread 0 with width 2 completes 418 tasks.
Task type: 0: Thread 0 with width 4 completes 0 tasks.
Task type: 1: Thread 0 with width 1 completes 0 tasks.
Task type: 1: Thread 0 with width 2 completes 0 tasks.
Task type: 1: Thread 0 with width 4 completes 0 tasks.
Task type: 2: Thread 0 with width 1 completes 0 tasks.
Task type: 2: Thread 0 with width 2 completes 0 tasks.
Task type: 2: Thread 0 with width 4 completes 0 tasks.
Task type: 3: Thread 0 with width 1 completes 0 tasks.
Task type: 3: Thread 0 with width 2 completes 0 tasks.
Task type: 3: Thread 0 with width 4 completes 0 tasks.
Task type: 4: Thread 0 with width 1 completes 0 tasks.
Task type: 4: Thread 0 with width 2 completes 0 tasks.
Task type: 4: Thread 0 with width 4 completes 0 tasks.
Task type: 5: Thread 0 with width 1 completes 0 tasks.
Task type: 5: Thread 0 with width 2 completes 0 tasks.
Task type: 5: Thread 0 with width 4 completes 0 tasks.
The total execution time of thread 0 is 200.207 s.
Thread 1 sleeps for 106483 ms. 
Task type: 0: Thread 1 with width 1 completes 7988 tasks.
Task type: 0: Thread 1 with width 2 completes 418 tasks.
Task type: 0: Thread 1 with width 4 completes 0 tasks.
Task type: 1: Thread 1 with width 1 completes 0 tasks.
Task type: 1: Thread 1 with width 2 completes 0 tasks.
Task type: 1: Thread 1 with width 4 completes 0 tasks.
Task type: 2: Thread 1 with width 1 completes 0 tasks.
Task type: 2: Thread 1 with width 2 completes 0 tasks.
Task type: 2: Thread 1 with width 4 completes 0 tasks.
Task type: 3: Thread 1 with width 1 completes 0 tasks.
Task type: 3: Thread 1 with width 2 completes 0 tasks.
Task type: 3: Thread 1 with width 4 completes 0 tasks.
Task type: 4: Thread 1 with width 1 completes 0 tasks.
Task type: 4: Thread 1 with width 2 completes 0 tasks.
Task type: 4: Thread 1 with width 4 completes 0 tasks.
Task type: 5: Thread 1 with width 1 completes 0 tasks.
Task type: 5: Thread 1 with width 2 completes 0 tasks.
Task type: 5: Thread 1 with width 4 completes 0 tasks.
The total execution time of thread 1 is 201.88 s.
Thread 3 sleeps for 286930 ms. 
Task type: 0: Thread 3 with width 1 completes 609 tasks.
Task type: 0: Thread 3 with width 2 completes 2 tasks.
Task type: 0: Thread 3 with width 4 completes 19 tasks.
Task type: 1: Thread 3 with width 1 completes 0 tasks.
Task type: 1: Thread 3 with width 2 completes 0 tasks.
Task type: 1: Thread 3 with width 4 completes 0 tasks.
Task type: 2: Thread 3 with width 1 completes 0 tasks.
Task type: 2: Thread 3 with width 2 completes 0 tasks.
Task type: 2: Thread 3 with width 4 completes 0 tasks.
Task type: 3: Thread 3 with width 1 completes 0 tasks.
Task type: 3: Thread 3 with width 2 completes 0 tasks.
Task type: 3: Thread 3 with width 4 completes 0 tasks.
Task type: 4: Thread 3 with width 1 completes 0 tasks.
Task type: 4: Thread 3 with width 2 completes 0 tasks.
Task type: 4: Thread 3 with width 4 completes 0 tasks.
Task type: 5: Thread 3 with width 1 completes 0 tasks.
Task type: 5: Thread 3 with width 2 completes 0 tasks.
Task type: 5: Thread 3 with width 4 completes 0 tasks.
The total execution time of thread 3 is 22.9342 s.
Thread 2 sleeps for 280823 ms. 
Task type: 0: Thread 2 with width 1 completes 757 tasks.
Task type: 0: Thread 2 with width 2 completes 2 tasks.
Task type: 0: Thread 2 with width 4 completes 19 tasks.
Task type: 1: Thread 2 with width 1 completes 0 tasks.
Task type: 1: Thread 2 with width 2 completes 0 tasks.
Task type: 1: Thread 2 with width 4 completes 0 tasks.
Task type: 2: Thread 2 with width 1 completes 0 tasks.
Task type: 2: Thread 2 with width 2 completes 0 tasks.
Task type: 2: Thread 2 with width 4 completes 0 tasks.
Task type: 3: Thread 2 with width 1 completes 0 tasks.
Task type: 3: Thread 2 with width 2 completes 0 tasks.
Task type: 3: Thread 2 with width 4 completes 0 tasks.
Task type: 4: Thread 2 with width 1 completes 0 tasks.
Task type: 4: Thread 2 with width 2 completes 0 tasks.
Task type: 4: Thread 2 with width 4 completes 0 tasks.
Task type: 5: Thread 2 with width 1 completes 0 tasks.
Task type: 5: Thread 2 with width 2 completes 0 tasks.
Task type: 5: Thread 2 with width 4 completes 0 tasks.
The total execution time of thread 2 is 29.0085 s.
Thread 4 sleeps for 252828 ms. 
Task type: 0: Thread 4 with width 1 completes 1538 tasks.
Task type: 0: Thread 4 with width 2 completes 4 tasks.
Task type: 0: Thread 4 with width 4 completes 19 tasks.
Task type: 1: Thread 4 with width 1 completes 0 tasks.
Task type: 1: Thread 4 with width 2 completes 0 tasks.
Task type: 1: Thread 4 with width 4 completes 0 tasks.
Task type: 2: Thread 4 with width 1 completes 0 tasks.
Task type: 2: Thread 4 with width 2 completes 0 tasks.
Task type: 2: Thread 4 with width 4 completes 0 tasks.
Task type: 3: Thread 4 with width 1 completes 0 tasks.
Task type: 3: Thread 4 with width 2 completes 0 tasks.
Task type: 3: Thread 4 with width 4 completes 0 tasks.
Task type: 4: Thread 4 with width 1 completes 0 tasks.
Task type: 4: Thread 4 with width 2 completes 0 tasks.
Task type: 4: Thread 4 with width 4 completes 0 tasks.
Task type: 5: Thread 4 with width 1 completes 0 tasks.
Task type: 5: Thread 4 with width 2 completes 0 tasks.
Task type: 5: Thread 4 with width 4 completes 0 tasks.
The total execution time of thread 4 is 57.1059 s.
Thread 5 sleeps for 280184 ms. 
Task type: 0: Thread 5 with width 1 completes 789 tasks.
Task type: 0: Thread 5 with width 2 completes 4 tasks.
Task type: 0: Thread 5 with width 4 completes 19 tasks.
Task type: 1: Thread 5 with width 1 completes 0 tasks.
Task type: 1: Thread 5 with width 2 completes 0 tasks.
Task type: 1: Thread 5 with width 4 completes 0 tasks.
Task type: 2: Thread 5 with width 1 completes 0 tasks.
Task type: 2: Thread 5 with width 2 completes 0 tasks.
Task type: 2: Thread 5 with width 4 completes 0 tasks.
Task type: 3: Thread 5 with width 1 completes 0 tasks.
Task type: 3: Thread 5 with width 2 completes 0 tasks.
Task type: 3: Thread 5 with width 4 completes 0 tasks.
Task type: 4: Thread 5 with width 1 completes 0 tasks.
Task type: 4: Thread 5 with width 2 completes 0 tasks.
Task type: 4: Thread 5 with width 4 completes 0 tasks.
Task type: 5: Thread 5 with width 1 completes 0 tasks.
Task type: 5: Thread 5 with width 2 completes 0 tasks.
Task type: 5: Thread 5 with width 4 completes 0 tasks.
The total execution time of thread 5 is 29.6973 s.
20000,2,1687727914901	1687728225456,310.556,64.4007
Total number of steals across clusters: 584


---------------------- Test Application - Synthetic Benchmarks ---------------------
---------------------- You choose Paper4 scheduler ---------------------
[Warning] CP->Memory-boundness (ClusterA) is smaller than 0!
CP: Training Phase finished. Predicted execution time and power results for the kernel tasks: 

---------- Execution Time Predictions ---------- 
Memory Frequency: 1866000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0162581	0.0115842	
CPU_Freq[1881600]: 0.0172743	0.0122025	
CPU_Freq[1728000]: 0.0184043	0.0133774	
CPU_Freq[1574400]: 0.0197639	0.0147815	
CPU_Freq[1420800]: 0.0214306	0.0164893	
CPU_Freq[1267200]: 0.0235217	0.018611	
CPU_Freq[1113600]: 0.0260013	0.0231457	
CPU_Freq[960000]: 0.0298431	0.0248913	
CPU_Freq[806400]: 0.034948	0.0298258	
CPU_Freq[652800]: 0.0426759	0.0370825	
CPU_Freq[499200]: 0.0557148	0.0488048	
CPU_Freq[345600]: 0.0822149	0.0709468	
Cluster 1: 
CPU_Freq[2035200]: 0.0381157	0.0218484	0.0232444	
CPU_Freq[1881600]: 0.0383708	0.0239241	0.0236275	
CPU_Freq[1728000]: 0.0395024	0.0258977	0.0242891	
CPU_Freq[1574400]: 0.0408702	0.0282669	0.0250974	
CPU_Freq[1420800]: 0.042556	0.0311638	0.0261066	
CPU_Freq[1267200]: 0.0446849	0.0347867	0.0274003	
CPU_Freq[1113600]: 0.046327	0.0398261	0.0296464	
CPU_Freq[960000]: 0.0512092	0.045664	0.0314883	
CPU_Freq[806400]: 0.056569	0.0543716	0.0349716	
CPU_Freq[652800]: 0.0648246	0.0674343	0.0405278	
CPU_Freq[499200]: 0.0790996	0.0891831	0.0505938	
CPU_Freq[345600]: 0.109229	0.132447	0.0732835	
Memory Frequency: 1600000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0170242	0.0112073	
CPU_Freq[1881600]: 0.0179683	0.0121986	
CPU_Freq[1728000]: 0.0190867	0.0133661	
CPU_Freq[1574400]: 0.0204323	0.0147615	
CPU_Freq[1420800]: 0.0220822	0.0164585	
CPU_Freq[1267200]: 0.0241523	0.018567	
CPU_Freq[1113600]: 0.026826	0.0212571	
CPU_Freq[960000]: 0.0304114	0.0248081	
CPU_Freq[806400]: 0.0354674	0.0297118	
CPU_Freq[652800]: 0.0431235	0.0369231	
CPU_Freq[499200]: 0.0560462	0.0485721	
CPU_Freq[345600]: 0.082327	0.0705759	
Cluster 1: 
CPU_Freq[2035200]: 0.0398682	0.0223312	0.0245994	
CPU_Freq[1881600]: 0.040807	0.0239883	0.0251338	
CPU_Freq[1728000]: 0.0419236	0.0259475	0.0257758	
CPU_Freq[1574400]: 0.0432732	0.0282995	0.0265607	
CPU_Freq[1420800]: 0.0449371	0.0311754	0.0275415	
CPU_Freq[1267200]: 0.0470387	0.0347723	0.0287998	
CPU_Freq[1113600]: 0.0497752	0.0393994	0.0304693	
CPU_Freq[960000]: 0.0534821	0.0455725	0.032783	
CPU_Freq[806400]: 0.0587784	0.0542195	0.0361841	
CPU_Freq[652800]: 0.0669405	0.0671932	0.0416193	
CPU_Freq[499200]: 0.0810646	0.0887982	0.0514899	
CPU_Freq[345600]: 0.110909	0.13179	0.0738104	
Memory Frequency: 1331200000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0181085	0.0112105	
CPU_Freq[1881600]: 0.0190387	0.0121929	
CPU_Freq[1728000]: 0.0201406	0.0133501	
CPU_Freq[1574400]: 0.0214665	0.014733	
CPU_Freq[1420800]: 0.0230924	0.016415	
CPU_Freq[1267200]: 0.0251327	0.0185047	
CPU_Freq[1113600]: 0.0277685	0.0211708	
CPU_Freq[960000]: 0.0313037	0.0246901	
CPU_Freq[806400]: 0.0362905	0.0295502	
CPU_Freq[652800]: 0.0438447	0.0366973	
CPU_Freq[499200]: 0.0566029	0.0482426	
CPU_Freq[345600]: 0.082573	0.0700504	
Cluster 1: 
CPU_Freq[2035200]: 0.0433751	0.0224887	0.02681	
CPU_Freq[1881600]: 0.0442958	0.0241285	0.0273208	
CPU_Freq[1728000]: 0.0453908	0.0260672	0.027935	
CPU_Freq[1574400]: 0.0467149	0.0283948	0.0286868	
CPU_Freq[1420800]: 0.0483476	0.0312411	0.0296272	
CPU_Freq[1267200]: 0.0504105	0.0348011	0.0308354	
CPU_Freq[1113600]: 0.0530976	0.0393812	0.032441	
CPU_Freq[960000]: 0.0567394	0.0454922	0.0346703	
CPU_Freq[806400]: 0.0619457	0.0540535	0.0379548	
CPU_Freq[652800]: 0.0699754	0.066901	0.0432186	
CPU_Freq[499200]: 0.0838857	0.0883023	0.0528124	
CPU_Freq[345600]: 0.113326	0.130909	0.07461	
Memory Frequency: 1062400000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0199348	0.0112153	
CPU_Freq[1881600]: 0.0208439	0.0121845	
CPU_Freq[1728000]: 0.0219209	0.013326	
CPU_Freq[1574400]: 0.0232172	0.0146902	
CPU_Freq[1420800]: 0.024807	0.0163494	
CPU_Freq[1267200]: 0.0268024	0.0184108	
CPU_Freq[1113600]: 0.029381	0.0210409	
CPU_Freq[960000]: 0.0328407	0.0245126	
CPU_Freq[806400]: 0.0377232	0.0293068	
CPU_Freq[652800]: 0.045124	0.0363572	
CPU_Freq[499200]: 0.0576345	0.0477463	
CPU_Freq[345600]: 0.0831366	0.069259	
Cluster 1: 
CPU_Freq[2035200]: 0.0487402	0.0228349	0.030257	
CPU_Freq[1881600]: 0.0496334	0.0244486	0.0307323	
CPU_Freq[1728000]: 0.0506962	0.0263566	0.0313047	
CPU_Freq[1574400]: 0.0519817	0.0286474	0.0320066	
CPU_Freq[1420800]: 0.0535675	0.0314491	0.0328862	
CPU_Freq[1267200]: 0.0555721	0.0349535	0.034019	
CPU_Freq[1113600]: 0.0581849	0.0394627	0.0355283	
CPU_Freq[960000]: 0.0617285	0.0454803	0.0376305	
CPU_Freq[806400]: 0.0667992	0.0539123	0.0407395	
CPU_Freq[652800]: 0.0746297	0.06657	0.0457452	
CPU_Freq[499200]: 0.088218	0.0876645	0.0549221	
CPU_Freq[345600]: 0.11705	0.129692	0.0759321	
Memory Frequency: 800000000: 
Cluster 0: 
CPU_Freq[2035200]: 0.0233962	0.0112231	
CPU_Freq[1881600]: 0.024271	0.0121707	
CPU_Freq[1728000]: 0.0253078	0.0132868	
CPU_Freq[1574400]: 0.0265558	0.0146206	
CPU_Freq[1420800]: 0.028087	0.0162428	
CPU_Freq[1267200]: 0.0300096	0.0182583	
CPU_Freq[1113600]: 0.0324952	0.0208298	
CPU_Freq[960000]: 0.0358323	0.0242241	
CPU_Freq[806400]: 0.0405453	0.0289116	
CPU_Freq[652800]: 0.0476971	0.0358048	
CPU_Freq[499200]: 0.0598051	0.0469401	
CPU_Freq[345600]: 0.0845471	0.0679735	
Cluster 1: 
CPU_Freq[2035200]: 0.0576692	0.0236765	0.0361582	
CPU_Freq[1881600]: 0.0585179	0.0252478	0.0365759	
CPU_Freq[1728000]: 0.0595283	0.0271059	0.0370805	
CPU_Freq[1574400]: 0.0607511	0.029337	0.0377012	
CPU_Freq[1420800]: 0.0622607	0.032066	0.0384822	
CPU_Freq[1267200]: 0.0641707	0.0354803	0.0394923	
CPU_Freq[1113600]: 0.0666626	0.0398744	0.0408452	
CPU_Freq[960000]: 0.0700468	0.04574	0.042741	
CPU_Freq[806400]: 0.0748974	0.0539623	0.0455649	
CPU_Freq[652800]: 0.082404	0.0663115	0.0501514	
CPU_Freq[499200]: 0.0954693	0.0869076	0.0586509	
CPU_Freq[345600]: 0.123314	0.127994	0.0783817	

---------- CPU Power Predictions ---------- 
Memory Frequency: 1866000000: 
Cluster 0: 
CPU_Freq[2035200]: 2.3637	3.13544	
CPU_Freq[1881600]: 2.07984	2.70275	
CPU_Freq[1728000]: 1.81999	2.3106	
CPU_Freq[1574400]: 1.58413	1.95897	
CPU_Freq[1420800]: 1.37228	1.64789	
CPU_Freq[1267200]: 1.18443	1.37733	
CPU_Freq[1113600]: 1.02058	1.14731	
CPU_Freq[960000]: 0.880737	0.957823	
CPU_Freq[806400]: 0.764895	0.80887	
CPU_Freq[652800]: 0.673055	0.70045	
CPU_Freq[499200]: 0.605217	0.632565	
CPU_Freq[345600]: 0.561382	0.605213	
Cluster 1: 
CPU_Freq[2035200]: 1.1204	1.88174	2.02299	
CPU_Freq[1881600]: 0.985775	1.65746	1.74798	
CPU_Freq[1728000]: 0.864334	1.45089	1.50085	
CPU_Freq[1574400]: 0.756074	1.26203	1.28159	
CPU_Freq[1420800]: 0.660997	1.09089	1.09021	
CPU_Freq[1267200]: 0.579102	0.937466	0.926699	
CPU_Freq[1113600]: 0.510389	0.801753	0.791062	
CPU_Freq[960000]: 0.454858	0.683753	0.6833	
CPU_Freq[806400]: 0.412509	0.583467	0.60341	
CPU_Freq[652800]: 0.383342	0.500895	0.551395	
CPU_Freq[499200]: 0.367357	0.436036	0.527253	
CPU_Freq[345600]: 0.364554	0.388891	0.530985	
Memory Frequency: 1600000000: 
Cluster 0: 
CPU_Freq[2035200]: 2.3637	3.13544	
CPU_Freq[1881600]: 2.07984	2.70275	
CPU_Freq[1728000]: 1.81999	2.3106	
CPU_Freq[1574400]: 1.58413	1.95897	
CPU_Freq[1420800]: 1.37228	1.64789	
CPU_Freq[1267200]: 1.18443	1.37733	
CPU_Freq[1113600]: 1.02058	1.14731	
CPU_Freq[960000]: 0.880737	0.957823	
CPU_Freq[806400]: 0.764895	0.80887	
CPU_Freq[652800]: 0.673055	0.70045	
CPU_Freq[499200]: 0.605217	0.632565	
CPU_Freq[345600]: 0.561382	0.605213	
Cluster 1: 
CPU_Freq[2035200]: 1.1204	1.88174	2.02299	
CPU_Freq[1881600]: 0.985775	1.65746	1.74798	
CPU_Freq[1728000]: 0.864334	1.45089	1.50085	
CPU_Freq[1574400]: 0.756074	1.26203	1.28159	
CPU_Freq[1420800]: 0.660997	1.09089	1.09021	
CPU_Freq[1267200]: 0.579102	0.937466	0.926699	
CPU_Freq[1113600]: 0.510389	0.801753	0.791062	
CPU_Freq[960000]: 0.454858	0.683753	0.6833	
CPU_Freq[806400]: 0.412509	0.583467	0.60341	
CPU_Freq[652800]: 0.383342	0.500895	0.551395	
CPU_Freq[499200]: 0.367357	0.436036	0.527253	
CPU_Freq[345600]: 0.364554	0.388891	0.530985	
Memory Frequency: 1331200000: 
Cluster 0: 
CPU_Freq[2035200]: 2.3637	3.13544	
CPU_Freq[1881600]: 2.07984	2.70275	
CPU_Freq[1728000]: 1.81999	2.3106	
CPU_Freq[1574400]: 1.58413	1.95897	
CPU_Freq[1420800]: 1.37228	1.64789	
CPU_Freq[1267200]: 1.18443	1.37733	
CPU_Freq[1113600]: 1.02058	1.14731	
CPU_Freq[960000]: 0.880737	0.957823	
CPU_Freq[806400]: 0.764895	0.80887	
CPU_Freq[652800]: 0.673055	0.70045	
CPU_Freq[499200]: 0.605217	0.632565	
CPU_Freq[345600]: 0.561382	0.605213	
Cluster 1: 
CPU_Freq[2035200]: 1.1204	1.88174	2.02299	
CPU_Freq[1881600]: 0.985775	1.65746	1.74798	
CPU_Freq[1728000]: 0.864334	1.45089	1.50085	
CPU_Freq[1574400]: 0.756074	1.26203	1.28159	
CPU_Freq[1420800]: 0.660997	1.09089	1.09021	
CPU_Freq[1267200]: 0.579102	0.937466	0.926699	
CPU_Freq[1113600]: 0.510389	0.801753	0.791062	
CPU_Freq[960000]: 0.454858	0.683753	0.6833	
CPU_Freq[806400]: 0.412509	0.583467	0.60341	
CPU_Freq[652800]: 0.383342	0.500895	0.551395	
CPU_Freq[499200]: 0.367357	0.436036	0.527253	
CPU_Freq[345600]: 0.364554	0.388891	0.530985	
Memory Frequency: 1062400000: 
Cluster 0: 
CPU_Freq[2035200]: 2.3637	3.13544	
CPU_Freq[1881600]: 2.07984	2.70275	
CPU_Freq[1728000]: 1.81999	2.3106	
CPU_Freq[1574400]: 1.58413	1.95897	
CPU_Freq[1420800]: 1.37228	1.64789	
CPU_Freq[1267200]: 1.18443	1.37733	
CPU_Freq[1113600]: 1.02058	1.14731	
CPU_Freq[960000]: 0.880737	0.957823	
CPU_Freq[806400]: 0.764895	0.80887	
CPU_Freq[652800]: 0.673055	0.70045	
CPU_Freq[499200]: 0.605217	0.632565	
CPU_Freq[345600]: 0.561382	0.605213	
Cluster 1: 
CPU_Freq[2035200]: 1.1204	1.88174	2.02299	
CPU_Freq[1881600]: 0.985775	1.65746	1.74798	
CPU_Freq[1728000]: 0.864334	1.45089	1.50085	
CPU_Freq[1574400]: 0.756074	1.26203	1.28159	
CPU_Freq[1420800]: 0.660997	1.09089	1.09021	
CPU_Freq[1267200]: 0.579102	0.937466	0.926699	
CPU_Freq[1113600]: 0.510389	0.801753	0.791062	
CPU_Freq[960000]: 0.454858	0.683753	0.6833	
CPU_Freq[806400]: 0.412509	0.583467	0.60341	
CPU_Freq[652800]: 0.383342	0.500895	0.551395	
CPU_Freq[499200]: 0.367357	0.436036	0.527253	
CPU_Freq[345600]: 0.364554	0.388891	0.530985	
Memory Frequency: 800000000: 
Cluster 0: 
CPU_Freq[2035200]: 2.3637	3.13544	
CPU_Freq[1881600]: 2.07984	2.70275	
CPU_Freq[1728000]: 1.81999	2.3106	
CPU_Freq[1574400]: 1.58413	1.95897	
CPU_Freq[1420800]: 1.37228	1.64789	
CPU_Freq[1267200]: 1.18443	1.37733	
CPU_Freq[1113600]: 1.02058	1.14731	
CPU_Freq[960000]: 0.880737	0.957823	
CPU_Freq[806400]: 0.764895	0.80887	
CPU_Freq[652800]: 0.673055	0.70045	
CPU_Freq[499200]: 0.605217	0.632565	
CPU_Freq[345600]: 0.561382	0.605213	
Cluster 1: 
CPU_Freq[2035200]: 1.1204	1.88174	2.02299	
CPU_Freq[1881600]: 0.985775	1.65746	1.74798	
CPU_Freq[1728000]: 0.864334	1.45089	1.50085	
CPU_Freq[1574400]: 0.756074	1.26203	1.28159	
CPU_Freq[1420800]: 0.660997	1.09089	1.09021	
CPU_Freq[1267200]: 0.579102	0.937466	0.926699	
CPU_Freq[1113600]: 0.510389	0.801753	0.791062	
CPU_Freq[960000]: 0.454858	0.683753	0.6833	
CPU_Freq[806400]: 0.412509	0.583467	0.60341	
CPU_Freq[652800]: 0.383342	0.500895	0.551395	
CPU_Freq[499200]: 0.367357	0.436036	0.527253	
CPU_Freq[345600]: 0.364554	0.388891	0.530985	

---------- Memory Power Predictions ---------- 
Memory Frequency: 1866000000: 
Cluster 0: 
CPU_Freq[2035200]: 2.56275	1.11309	
CPU_Freq[1881600]: 2.4904	1.12451	
CPU_Freq[1728000]: 2.41521	1.13185	
CPU_Freq[1574400]: 2.33718	1.13512	
CPU_Freq[1420800]: 2.25631	1.1343	
CPU_Freq[1267200]: 2.1726	1.12941	
CPU_Freq[1113600]: 2.08605	1.12044	
CPU_Freq[960000]: 1.99666	1.10738	
CPU_Freq[806400]: 1.90442	1.09025	
CPU_Freq[652800]: 1.80935	1.06904	
CPU_Freq[499200]: 1.71143	1.04375	
CPU_Freq[345600]: 1.61067	1.01438	
Cluster 1: 
CPU_Freq[2035200]: 1.93253	1.14418	2.15589	
CPU_Freq[1881600]: 1.91038	1.14926	2.12488	
CPU_Freq[1728000]: 1.88639	1.15144	2.09198	
CPU_Freq[1574400]: 1.86057	1.15072	2.05719	
CPU_Freq[1420800]: 1.8329	1.14709	2.02051	
CPU_Freq[1267200]: 1.8034	1.14056	1.98195	
CPU_Freq[1113600]: 1.77206	1.13112	1.94149	
CPU_Freq[960000]: 1.73888	1.11878	1.89915	
CPU_Freq[806400]: 1.70386	1.10353	1.85492	
CPU_Freq[652800]: 1.667	1.08538	1.8088	
CPU_Freq[499200]: 1.6283	1.06433	1.76079	
CPU_Freq[345600]: 1.58777	1.04037	1.71089	
Memory Frequency: 1600000000: 
Cluster 0: 
CPU_Freq[2035200]: 2.21734	0.73183	
CPU_Freq[1881600]: 2.14487	0.744118	
CPU_Freq[1728000]: 2.06956	0.752325	
CPU_Freq[1574400]: 1.99141	0.756454	
CPU_Freq[1420800]: 1.91042	0.756503	
CPU_Freq[1267200]: 1.82658	0.752472	
CPU_Freq[1113600]: 1.73991	0.744362	
CPU_Freq[960000]: 1.65039	0.732172	
CPU_Freq[806400]: 1.55804	0.715903	
CPU_Freq[652800]: 1.46284	0.695555	
CPU_Freq[499200]: 1.3648	0.671127	
CPU_Freq[345600]: 1.26392	0.642619	
Cluster 1: 
CPU_Freq[2035200]: 1.5419	0.738279	1.76762	
CPU_Freq[1881600]: 1.51975	0.743369	1.7366	
CPU_Freq[1728000]: 1.49576	0.745555	1.7037	
CPU_Freq[1574400]: 1.46994	0.744836	1.6689	
CPU_Freq[1420800]: 1.44227	0.741212	1.63222	
CPU_Freq[1267200]: 1.41277	0.734684	1.59365	
CPU_Freq[1113600]: 1.38143	0.725251	1.55319	
CPU_Freq[960000]: 1.34825	0.712914	1.51084	
CPU_Freq[806400]: 1.31323	0.697673	1.46661	
CPU_Freq[652800]: 1.27637	0.679527	1.42048	
CPU_Freq[499200]: 1.23767	0.658476	1.37247	
CPU_Freq[345600]: 1.19714	0.634521	1.32257	
Memory Frequency: 1331200000: 
Cluster 0: 
CPU_Freq[2035200]: 1.98339	0.452034	
CPU_Freq[1881600]: 1.9108	0.465194	
CPU_Freq[1728000]: 1.83537	0.474274	
CPU_Freq[1574400]: 1.7571	0.479275	
CPU_Freq[1420800]: 1.67598	0.480197	
CPU_Freq[1267200]: 1.59202	0.477039	
CPU_Freq[1113600]: 1.50523	0.469802	
CPU_Freq[960000]: 1.41559	0.458485	
CPU_Freq[806400]: 1.32311	0.443089	
CPU_Freq[652800]: 1.22778	0.423613	
CPU_Freq[499200]: 1.12962	0.400058	
CPU_Freq[345600]: 1.02861	0.372424	
Cluster 1: 
CPU_Freq[2035200]: 1.28173	0.452602	1.5025	
CPU_Freq[1881600]: 1.25958	0.457697	1.47148	
CPU_Freq[1728000]: 1.23559	0.459887	1.43857	
CPU_Freq[1574400]: 1.20977	0.459172	1.40377	
CPU_Freq[1420800]: 1.1821	0.455553	1.36708	
CPU_Freq[1267200]: 1.1526	0.449029	1.3285	
CPU_Freq[1113600]: 1.12126	0.439601	1.28804	
CPU_Freq[960000]: 1.08808	0.427269	1.24569	
CPU_Freq[806400]: 1.05306	0.412031	1.20145	
CPU_Freq[652800]: 1.0162	0.39389	1.15532	
CPU_Freq[499200]: 0.977501	0.372844	1.1073	
CPU_Freq[345600]: 0.936965	0.348893	1.0574	
Memory Frequency: 1062400000: 
Cluster 0: 
CPU_Freq[2035200]: 1.86515	0.278262	
CPU_Freq[1881600]: 1.79244	0.292295	
CPU_Freq[1728000]: 1.71688	0.302248	
CPU_Freq[1574400]: 1.63849	0.308122	
CPU_Freq[1420800]: 1.55725	0.309917	
CPU_Freq[1267200]: 1.47317	0.307632	
CPU_Freq[1113600]: 1.38625	0.301267	
CPU_Freq[960000]: 1.29648	0.290823	
CPU_Freq[806400]: 1.20388	0.2763	
CPU_Freq[652800]: 1.10843	0.257697	
CPU_Freq[499200]: 1.01015	0.235015	
CPU_Freq[345600]: 0.909019	0.208253	
Cluster 1: 
CPU_Freq[2035200]: 1.15683	0.292069	1.36528	
CPU_Freq[1881600]: 1.13468	0.297168	1.33426	
CPU_Freq[1728000]: 1.1107	0.299363	1.30134	
CPU_Freq[1574400]: 1.08487	0.298653	1.26654	
CPU_Freq[1420800]: 1.05721	0.295038	1.22985	
CPU_Freq[1267200]: 1.0277	0.288519	1.19127	
CPU_Freq[1113600]: 0.996363	0.279095	1.1508	
CPU_Freq[960000]: 0.963182	0.266767	1.10844	
CPU_Freq[806400]: 0.928162	0.251534	1.06419	
CPU_Freq[652800]: 0.891304	0.233397	1.01806	
CPU_Freq[499200]: 0.852607	0.212355	0.970039	
CPU_Freq[345600]: 0.812071	0.188409	0.920129	
Memory Frequency: 800000000: 
Cluster 0: 
CPU_Freq[2035200]: 1.86134	0.210897	
CPU_Freq[1881600]: 1.7885	0.225782	
CPU_Freq[1728000]: 1.71283	0.236587	
CPU_Freq[1574400]: 1.63431	0.243313	
CPU_Freq[1420800]: 1.55295	0.245959	
CPU_Freq[1267200]: 1.46875	0.244526	
CPU_Freq[1113600]: 1.38171	0.239014	
CPU_Freq[960000]: 1.29182	0.229422	
CPU_Freq[806400]: 1.1991	0.215751	
CPU_Freq[652800]: 1.10353	0.198	
CPU_Freq[499200]: 1.00513	0.17617	
CPU_Freq[345600]: 0.903876	0.15026	
Cluster 1: 
CPU_Freq[2035200]: 1.1654	0.256069	1.35471	
CPU_Freq[1881600]: 1.14325	0.261172	1.32367	
CPU_Freq[1728000]: 1.11926	0.263371	1.29075	
CPU_Freq[1574400]: 1.09344	0.262665	1.25595	
CPU_Freq[1420800]: 1.06577	0.259055	1.21925	
CPU_Freq[1267200]: 1.03627	0.25254	1.18067	
CPU_Freq[1113600]: 1.00493	0.243121	1.14019	
CPU_Freq[960000]: 0.971745	0.230797	1.09783	
CPU_Freq[806400]: 0.936725	0.215568	1.05358	
CPU_Freq[652800]: 0.899867	0.197436	1.00744	
CPU_Freq[499200]: 0.86117	0.176398	0.959418	
CPU_Freq[345600]: 0.820634	0.152456	0.909503	

[Congratulations!] All the training Phase finished. Training finished time: 1687728257931. Set the CPU frequency of all clusters back to the highest frequency
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 53.9639% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 46.0361% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <2> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 45.1327% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 54.8673% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.7277% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.2723% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.6651% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.3349% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.5478% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.4522% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.1085% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.8915% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.8739% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.1261% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.4248% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.5752% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.7033% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.2967% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.048% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.952% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.7319% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.2681% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.2017% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.7983% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.3513% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.6487% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.2758% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.7242% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.4787% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.5213% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.2622% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.7378% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.1792% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.8208% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.4317% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.5683% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.4777% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.5223% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.4945% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.5055% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.6106% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.3894% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.2094% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.7906% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.5569% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.4431% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.0358% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.9642% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.7929% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.2071% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.3325% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.6676% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.743% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.257% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.3288% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.6712% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.335% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.665% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.0319% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.9681% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.1197% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.8803% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.0135% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.9865% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.9665% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.0335% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.9827% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.0173% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.0428% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.9572% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.3884% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.6116% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.341% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.659% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.2247% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.7753% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.247% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.753% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.4073% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.5927% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.326% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.674% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.3873% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.6127% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.4333% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.5667% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.0263% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.9736% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.6458% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.3542% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.4847% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.5153% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.6768% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.3232% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.2141% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.7859% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.3562% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.6438% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.5303% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.4697% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.0152% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.9848% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.2944% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.7056% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.189% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.811% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.5486% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.4514% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.6609% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.3391% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.3928% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.6072% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.0067% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.9933% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.1243% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.8757% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.1443% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.8557% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.6747% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.3252% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.9634% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.0366% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.5906% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.4094% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.6465% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.3535% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.7166% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.2834% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.8944% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.1056% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.7388% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.2611% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.9646% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.0353% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.9262% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.0738% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.9618% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.0382% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.9044% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.0956% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.1493% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.8507% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.0619% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.9381% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 40.9745% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 59.0255% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.5977% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.4023% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.4484% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.5516% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 52.072% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 47.928% of tasks should be scheduled to cluster 1
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 41.3186% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 58.6814% of tasks should be scheduled to cluster 1
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] Work stealing from cluster 1 to cluster 0
[DEBUG] The best resource width for CP tasks on cluster 1 and 2 are <1> and <1>
[DEBUG] Using <2> cores in cluster 1 and <4> cores in cluster 2 achieves the lowest predicted EDP.
[DEBUG] For CP tasks, 51.3751% of tasks should be scheduled to cluster 0
[DEBUG] For CP tasks, 48.6249% of tasks should be scheduled to cluster 1
Thread 0 sleeps for 114379 ms. 
Task type: 0: Thread 0 with width 1 completes 7953 tasks.
Task type: 0: Thread 0 with width 2 completes 127 tasks.
Task type: 0: Thread 0 with width 4 completes 0 tasks.
Task type: 1: Thread 0 with width 1 completes 0 tasks.
Task type: 1: Thread 0 with width 2 completes 0 tasks.
Task type: 1: Thread 0 with width 4 completes 0 tasks.
Task type: 2: Thread 0 with width 1 completes 0 tasks.
Task type: 2: Thread 0 with width 2 completes 0 tasks.
Task type: 2: Thread 0 with width 4 completes 0 tasks.
Task type: 3: Thread 0 with width 1 completes 0 tasks.
Task type: 3: Thread 0 with width 2 completes 0 tasks.
Task type: 3: Thread 0 with width 4 completes 0 tasks.
Task type: 4: Thread 0 with width 1 completes 0 tasks.
Task type: 4: Thread 0 with width 2 completes 0 tasks.
Task type: 4: Thread 0 with width 4 completes 0 tasks.
Task type: 5: Thread 0 with width 1 completes 0 tasks.
Task type: 5: Thread 0 with width 2 completes 0 tasks.
Task type: 5: Thread 0 with width 4 completes 0 tasks.
The total execution time of thread 0 is 196.604 s.
Thread 1 sleeps for 115233 ms. 
Task type: 0: Thread 1 with width 1 completes 7927 tasks.
Task type: 0: Thread 1 with width 2 completes 127 tasks.
Task type: 0: Thread 1 with width 4 completes 0 tasks.
Task type: 1: Thread 1 with width 1 completes 0 tasks.
Task type: 1: Thread 1 with width 2 completes 0 tasks.
Task type: 1: Thread 1 with width 4 completes 0 tasks.
Task type: 2: Thread 1 with width 1 completes 0 tasks.
Task type: 2: Thread 1 with width 2 completes 0 tasks.
Task type: 2: Thread 1 with width 4 completes 0 tasks.
Task type: 3: Thread 1 with width 1 completes 0 tasks.
Task type: 3: Thread 1 with width 2 completes 0 tasks.
Task type: 3: Thread 1 with width 4 completes 0 tasks.
Task type: 4: Thread 1 with width 1 completes 0 tasks.
Task type: 4: Thread 1 with width 2 completes 0 tasks.
Task type: 4: Thread 1 with width 4 completes 0 tasks.
Task type: 5: Thread 1 with width 1 completes 0 tasks.
Task type: 5: Thread 1 with width 2 completes 0 tasks.
Task type: 5: Thread 1 with width 4 completes 0 tasks.
The total execution time of thread 1 is 195.778 s.
Thread 3 sleeps for 288293 ms. 
Task type: 0: Thread 3 with width 1 completes 645 tasks.
Task type: 0: Thread 3 with width 2 completes 4 tasks.
Task type: 0: Thread 3 with width 4 completes 12 tasks.
Task type: 1: Thread 3 with width 1 completes 0 tasks.
Task type: 1: Thread 3 with width 2 completes 0 tasks.
Task type: 1: Thread 3 with width 4 completes 0 tasks.
Task type: 2: Thread 3 with width 1 completes 0 tasks.
Task type: 2: Thread 3 with width 2 completes 0 tasks.
Task type: 2: Thread 3 with width 4 completes 0 tasks.
Task type: 3: Thread 3 with width 1 completes 0 tasks.
Task type: 3: Thread 3 with width 2 completes 0 tasks.
Task type: 3: Thread 3 with width 4 completes 0 tasks.
Task type: 4: Thread 3 with width 1 completes 0 tasks.
Task type: 4: Thread 3 with width 2 completes 0 tasks.
Task type: 4: Thread 3 with width 4 completes 0 tasks.
Task type: 5: Thread 3 with width 1 completes 0 tasks.
Task type: 5: Thread 3 with width 2 completes 0 tasks.
Task type: 5: Thread 3 with width 4 completes 0 tasks.
The total execution time of thread 3 is 24.1014 s.
Thread 4 sleeps for 269781 ms. 
Task type: 0: Thread 4 with width 1 completes 1147 tasks.
Task type: 0: Thread 4 with width 2 completes 3 tasks.
Task type: 0: Thread 4 with width 4 completes 12 tasks.
Task type: 1: Thread 4 with width 1 completes 0 tasks.
Task type: 1: Thread 4 with width 2 completes 0 tasks.
Task type: 1: Thread 4 with width 4 completes 0 tasks.
Task type: 2: Thread 4 with width 1 completes 0 tasks.
Task type: 2: Thread 4 with width 2 completes 0 tasks.
Task type: 2: Thread 4 with width 4 completes 0 tasks.
Task type: 3: Thread 4 with width 1 completes 0 tasks.
Task type: 3: Thread 4 with width 2 completes 0 tasks.
Task type: 3: Thread 4 with width 4 completes 0 tasks.
Task type: 4: Thread 4 with width 1 completes 0 tasks.
Task type: 4: Thread 4 with width 2 completes 0 tasks.
Task type: 4: Thread 4 with width 4 completes 0 tasks.
Task type: 5: Thread 4 with width 1 completes 0 tasks.
Task type: 5: Thread 4 with width 2 completes 0 tasks.
Task type: 5: Thread 4 with width 4 completes 0 tasks.
The total execution time of thread 4 is 42.6288 s.
Thread 2 sleeps for 273228 ms. 
Task type: 0: Thread 2 with width 1 completes 1027 tasks.
Task type: 0: Thread 2 with width 2 completes 4 tasks.
Task type: 0: Thread 2 with width 4 completes 12 tasks.
Task type: 1: Thread 2 with width 1 completes 0 tasks.
Task type: 1: Thread 2 with width 2 completes 0 tasks.
Task type: 1: Thread 2 with width 4 completes 0 tasks.
Task type: 2: Thread 2 with width 1 completes 0 tasks.
Task type: 2: Thread 2 with width 2 completes 0 tasks.
Task type: 2: Thread 2 with width 4 completes 0 tasks.
Task type: 3: Thread 2 with width 1 completes 0 tasks.
Task type: 3: Thread 2 with width 2 completes 0 tasks.
Task type: 3: Thread 2 with width 4 completes 0 tasks.
Task type: 4: Thread 2 with width 1 completes 0 tasks.
Task type: 4: Thread 2 with width 2 completes 0 tasks.
Task type: 4: Thread 2 with width 4 completes 0 tasks.
Task type: 5: Thread 2 with width 1 completes 0 tasks.
Task type: 5: Thread 2 with width 2 completes 0 tasks.
Task type: 5: Thread 2 with width 4 completes 0 tasks.
The total execution time of thread 2 is 39.2167 s.
Thread 5 sleeps for 269587 ms. 
Task type: 0: Thread 5 with width 1 completes 1155 tasks.
Task type: 0: Thread 5 with width 2 completes 3 tasks.
Task type: 0: Thread 5 with width 4 completes 12 tasks.
Task type: 1: Thread 5 with width 1 completes 0 tasks.
Task type: 1: Thread 5 with width 2 completes 0 tasks.
Task type: 1: Thread 5 with width 4 completes 0 tasks.
Task type: 2: Thread 5 with width 1 completes 0 tasks.
Task type: 2: Thread 5 with width 2 completes 0 tasks.
Task type: 2: Thread 5 with width 4 completes 0 tasks.
Task type: 3: Thread 5 with width 1 completes 0 tasks.
Task type: 3: Thread 5 with width 2 completes 0 tasks.
Task type: 3: Thread 5 with width 4 completes 0 tasks.
Task type: 4: Thread 5 with width 1 completes 0 tasks.
Task type: 4: Thread 5 with width 2 completes 0 tasks.
Task type: 4: Thread 5 with width 4 completes 0 tasks.
Task type: 5: Thread 5 with width 1 completes 0 tasks.
Task type: 5: Thread 5 with width 2 completes 0 tasks.
Task type: 5: Thread 5 with width 4 completes 0 tasks.
The total execution time of thread 5 is 42.9651 s.
20000,2,1687728256278	1687728569385,313.107,63.8759
Total number of steals across clusters: 353


